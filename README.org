#+TITLE: README
#+LATEX_CLASS: article
#+OPTIONS: toc:nil
#+STARTUP: showall

[[https://travis-ci.org/kimim/kimim-emacs][https://travis-ci.org/kimim/kimim-emacs.svg]]

* Introduction

This Emacs configuration file is written with literate programming method[fn:1].
The =emacs-lisp= code is extracted from this =orgmode= [fn:2] file, and then
compiled to binary =elc= file for fast loading in the future.

* Installation

First of all, you need to get =emacs= and install it in your machine.

** Windows/MSYS2

On Windows platform, we have three options: 1) MSYS2, 2) Cygwin, 3) WSL2.

With msys2[fn:3] installed in =C:\msys64=, you can open =C:\msys64\mingw64.exe=, and
run following command to install Emacs:

#+begin_src shell
pacman -S git mingw-w64-x86_64-emacs
#+end_src

Since 2020, I use MSYS2 MingW64 Emacs for most of the time, Cygwin Emacs is not
actively tested now, but Emacs should work in Cygwin environment smoothly.

** Windows/Cygwin

Cygwin project[fn:4] is a large collection of GNU and Open Source tools provide
functionality similar to a Linux distribution on Windows.

You can find Cygwin setup here: https://cygwin.com/setup-x86_64.exe , download
and install it in your machine, for example, at =C:\cygwin64=. Then you can use
=mintty.exe= to work with =bash=.

In order to make life easier, we will use =apt-cyg=[fn:5] to install =emacs= and
other tools. Let's download =apt-cyg= and install =emacs= and =git=:

#+begin_src shell
curl https://raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg \
     > /usr/local/bin/apt-cyg
chmod +x /usr/local/bin/apt-cyg
apt-cyg install emacs-w32 git
#+end_src

Then start =emacs= from cygwin terminal, and right click the =emacs= icon to pin it
to taskbar, then click the property of this icon to add bellow to the target
field. This way will hide the black terminal.

#+begin_src bat
C:\cygwin64\bin\run.exe emacs-w32
#+end_src

You can also add =emacs --daemon= in your scheduled task, and change the target
field as:

#+begin_src bat
C:\cygwin64\bin\run.exe emacsclient -c
#+end_src

This will attach the client to the server daemon. You can get a running =emacs=
very quick.

** Windows/WSL2

Nowadays, Windows is embracing Linux tightly. You can try =emacs= on Windows
subsystem for Linux version 2. You can get Ubuntu Linux from Windows App
Store. And Manjaro Linux for WSL2[fn:6] from
https://github.com/sileshn/ManjaroWSL/releases

** macOS

For Apple macOS, most UNIX tools are installed already. You can use
homebrew[fn:7] to install additional application if it is missing.

#+begin_src shell
/bin/bash -c \
"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
brew tap railwaycat/emacsmacport
brew install emacs-mac
#+end_src

** Linux

Most of the external tools I used in this Emacs configuration should be easily
installed or already available in main Linux distributions.

For example, in Ubuntu, you can install this way:

#+begin_src shell
sudo snap install emacs --classic
#+end_src

It is also very quick to add emacs in ArchLinux/Manjaro:

#+begin_src shell
pacman -S emacs
#+end_src

* Preparation

** Get emacs config

You can follow below shell commands to prepare the =emacs= configuration files and
folders:

#+begin_src shell
# backup existing emacs config
cd ~ && mv .emacs .emacs-backup && mv .emacs.d .emacs.d-backup
# clone this config
git clone https://github.com/kimim/kimim-emacs
# copy default .emacs to ~
cp kimim-emacs/.emacs ~
#+end_src

This configuration uses several path to keep different information, you need to
define them in =~/.emacs=:

- =kimim/path-sync= is the root of sync folder
- =kimim/path-sync-emacs= to sync emacs settings
- =kimim/path-org= to sync todo list and journals
- =kimim/path-notes= to sync notes
- =kimim/path-ref= to keep reference documents
- =kimim/path-kimim-emacs= where kimim-emacs you clone to

Let's tell =emacs=, if the pathes are not set, report error:

#+begin_src emacs-lisp
(mapc (lambda (path)
        (if (not (boundp path))
            (error (concat "please set " (symbol-name path) " in ~/.emacs"))))
      '(kimim/path-sync
        kimim/path-sync-emacs
        kimim/path-org
        kimim/path-notes
        kimim/path-ref
        kimim/path-kimim-emacs))
#+end_src

Then you can execute =emacs= to bootstrap itself.

* Environment

** PATH and exec-path

Environment variable =PATH= is the the searching path of executables by the
shell running in Emacs while =exec-path= is the search path of Emacs itself. So
we should set both of them to almost the same paths.

As I have a Windows box in the office, and a Apple macOS at home, so I need to
specify these variables in different way.

#+begin_src emacs-lisp
(cond
 ((eq system-type 'cygwin)
  (setq kimim/path-root "/"))
 ((eq system-type 'darwin)
  (setq kimim/path-root "/")
  (add-to-list 'exec-path "/Library/TeX/texbin")
  (add-to-list 'exec-path (concat (getenv "HOME") "/Library/Python/2.7/bin")))
 ((eq system-type 'gnu/linux)
  (setq kimim/path-root "/")
  (add-to-list 'exec-path "/usr/local/texlive/2020/bin/x86_64-linux/")))

(add-to-list 'exec-path (concat kimim/path-root "bin"))
(add-to-list 'exec-path (concat kimim/path-root "usr/bin"))
(add-to-list 'exec-path (concat kimim/path-root "usr/local/bin"))
#+end_src

Then append exec-path to PATH:

#+begin_src emacs-lisp
(setenv "PATH"
        (concat
         (mapconcat #'identity exec-path path-separator)
         (getenv "PATH")))
#+end_src

For Windows/MSYS64, we need to modify =executable-find= to locate
shell scripts:

#+begin_src emacs-lisp
(defun executable-find (command &optional remote)
  "Search for COMMAND in `exec-path' and return the absolute file name.
Return nil if COMMAND is not found anywhere in `exec-path'.  If
REMOTE is non-nil, search on the remote host indicated by
`default-directory' instead."
  (if (and remote (file-remote-p default-directory))
      (let ((res (locate-file
                  command
                  (mapcar
                   (lambda (x) (concat (file-remote-p default-directory) x))
                   (exec-path))
                  exec-suffixes 'file-executable-p)))
        (when (stringp res) (file-local-name res)))
    ;; Use 1 rather than file-executable-p to better match the
    ;; behavior of call-process.
    (let ((default-directory (file-name-quote default-directory 'top)))
      (locate-file command exec-path exec-suffixes))))
#+end_src

** Language

I prefer to use English/UTF-8 as default language environment.

#+begin_src emacs-lisp
(setenv "LANG" "en_US.UTF-8")
(setenv "LC_ALL" "en_US.UTF-8")
;; remove svn log LC_TYPE not defined warning.
(setenv "LC_CTYPE" "en_US.UTF-8")
(setenv "LC_TIME" "en_US.UTF-8")
(set-locale-environment "en_US.UTF-8")
(set-language-environment 'English)
(prefer-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(set-file-name-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-clipboard-coding-system 'utf-8)
(cond
 ((member system-type '(windows-nt cygwin))
  (set-clipboard-coding-system 'utf-16le)))
#+end_src

** global key map

Define new command prefix for keys such as "C-x m f", "C-x m v".

#+begin_src emacs-lisp
(define-prefix-command 'ctl-x-m-map)
(global-set-key "\C-xm" 'ctl-x-m-map)
#+end_src

* Package

=package= [fn:8] is the modern =elisp= package management system, which let you
easily download and install packages that implement additional features. Each
package is a separate Emacs Lisp program, sometimes including other components
such as an Info manual.

All the extensions used in this file are installed and managed by =package=.

Here I use =use-package= to defer the package loading and even installation,
When you use the =:commands= keyword, it creates autoloads for those commands
and defers loading of the module until they are used.

#+begin_src emacs-lisp
;; temporary disable signature check
(setq package-check-signature nil)
(setq package-user-dir "~/.emacs.d/elpa")
(setq package-archives
      '(("gnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
        ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
        ("org" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/org/")))
(mapc
 (lambda (package)
   (unless (package-installed-p package)
     (progn (message "installing %s" package)
            (package-refresh-contents)
            (package-install package))))
 '(use-package diminish bind-key))

(require 'use-package)
(require 'diminish)
(require 'bind-key)
;; install package if missing
(setq use-package-always-ensure t)
(setq use-package-always-defer t)
(setq use-package-verbose t)
#+end_src

* Emacs Frame

Set look & feel before all other settings.

** Menu Bar and Tool Bar

Don't display menu-bar, tool-bar, tooltip and scroll-bar. Because sometimes,
they may catch your attention. But you cannot hide menu bar in macOS desktop
environment, because the system preserves menu bar for every applications.

#+begin_src emacs-lisp
(defun kimim/menu-and-bar ()
  (cond
   (window-system
    ;; Enable copy and paste in Win32
    (setq select-enable-clipboard t)
    (menu-bar-mode 0)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (scroll-bar-mode -1))
   ((eq window-system nil)
    (menu-bar-mode 0))))

(kimim/menu-and-bar)
#+end_src

** Font and Frame Size

Set default font and frame size for both window system. You should
=set-default-font= first, otherwise, the frame height and width will be
calculated with original default font height and width: =frame-char-height= and
=frame-char-width=.

#+begin_src emacs-lisp
(use-package cnfonts
  :functions cnfonts-set-font-first-time)
#+end_src

#+begin_src emacs-lisp
(defun kimim/frame-and-font ()
  (interactive)
  (when window-system
    (use-package cnfonts)
    (cnfonts-enable)
    (cnfonts-set-font-first-time)
    ;; top, left ... must be integer
    (let ((width (nth 3 (caar (display-monitor-attributes-list))))
          (height (nth 4 (caar (display-monitor-attributes-list))))
          (frame (selected-frame)))
      (set-frame-position frame (/ width 10) (/ height 10))
      (set-frame-height frame (/ (* 4 height)
                                 (* 5 (frame-char-height))))
      (set-frame-width frame (/ (* 4 width)
                                (* 5 (frame-char-width))))
      (add-to-list 'default-frame-alist
                   (cons 'top  (/ height 10)))
      (add-to-list 'default-frame-alist
                   (cons 'left (/ width 10)))
      (add-to-list 'default-frame-alist
                   (cons 'height (/ (* 4 height)
                                    (* 5 (frame-char-height)))))
      (add-to-list 'default-frame-alist
                   (cons 'width (/ (* 4 width)
                                   (* 5 (frame-char-width))))))))

(kimim/frame-and-font)
#+end_src

* Frame Title

Customize the frame title to display buffer file name.

#+begin_src emacs-lisp
(setq frame-title-format
      '((:eval (buffer-name))))
#+end_src

* Mode Line

Display date and time, but do not display system load.

#+begin_src emacs-lisp
(use-package time
  :ensure nil
  :defer 1
  :custom
  (display-time-24hr-format t)
  (display-time-day-and-date t)
  (display-time-interval 10)
  (display-time-default-load-average nil)
  :config
  (display-time-mode t))
#+end_src

Show (line, column) numbers in mode line:

#+begin_src emacs-lisp
(use-package simple
  :ensure nil
  :defer 3
  :bind
  ;; cycling from one space, zero space and original space
  ("M-SPC" . cycle-spacing)
  :custom
  ;; put pastebin content to kill ring before kill others
  (save-interprogram-paste-before-kill t)
  :config
  (line-number-mode 1)
  (column-number-mode 1)
  (toggle-word-wrap -1))
#+end_src

* Color Theme

Use =rainbow-mode= to edit colorful color string and symbol. In the
beginning, I add ~:hook prog-mode~, that means to enable ~rainbow-mode~
for all programming mode, but later, I find that ~#def~ part of ~#define~
in C is changed to gray color. Then I remove the this hook. So I will
turn on ~rainbow-mode~ manually, if I want to see the color.

#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish rainbow-mode)
#+end_src

Rainbow-delimiters is a "rainbow parentheses"-like mode which highlights
parentheses, brackets, and braces according to their depth.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :diminish rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

Toggle Font-Lock mode in all buffers.

#+begin_src emacs-lisp
(use-package font-lock
  :ensure nil
  :custom ((font-lock-maximum-decoration t)
           (font-lock-global-modes '(not shell-mode text-mode))
           (font-lock-verbose t))
  :config
  (global-font-lock-mode 1))
#+end_src

Use kimim-light as default theme.

#+begin_src emacs-lisp
(use-package custom
  :ensure nil
  :defer 0
  :custom (;; do not warning when load new theme
           (custom-safe-themes t)
           ;; add my theme files to custom theme directory
           (custom-theme-directory "~/kimim-emacs/site-lisp/"))
  :config
  (load-theme 'kimim-light t))
#+end_src

* Highlight

Highlight current line in window systems, but disable this in terminal. Because
the line highlight will cause the terminal blinking.

#+begin_src emacs-lisp
(use-package hl-line
  :if window-system
  :defer 5
  :config
  (global-hl-line-mode -1))
#+end_src

Automatically highlight current symbol where the cursor is inside.

#+begin_src emacs-lisp
(use-package auto-highlight-symbol
  :diminish auto-highlight-symbol-mode
  :bind ("C-x m e" . ahs-edit-mode)
  :config
  (global-auto-highlight-symbol-mode t))
#+end_src

* Other Visual Element

#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)
(setq visible-bell t)
(setq ring-bell-function #'ignore)
(fset 'yes-or-no-p 'y-or-n-p)
(show-paren-mode 1)
(setq blink-cursor-blinks 3)
(blink-cursor-mode 1)
(tooltip-mode -1)
;; mark highlight in other windows also
(setq highlight-nonselected-windows nil)
#+end_src

#+begin_src emacs-lisp
(use-package hi-lock
  :custom (hi-lock-auto-select-face t))
#+end_src

* Help

** Info

#+begin_src emacs-lisp
(use-package info
  :commands (info)
  :config
  (add-to-list 'Info-additional-directory-list
               (concat kimim/path-root "usr/share/info"))
  (add-to-list 'Info-additional-directory-list
               (concat kimim/path-root "usr/local/share/info"))
  ;; additional info, collected from internet
  (add-to-list 'Info-additional-directory-list
               "~/info"))
#+end_src

** tldr

TL;DR stands for "Too Long; Didn't Read"[fn:9]. =tldr.el= [fn:10] is the Emacs
client.

#+begin_src emacs-lisp
(use-package tldr)
#+end_src

* Encryption

Sometimes, you need to encrypt some secret files, setting ~epa-pinentry-mode~ to
~loopback~ will prompt password inside minibuffer, while not show a dialog for it.

And we also cache the symmetric key in the same
#+begin_src emacs-lisp
(use-package epa
  :ensure nil
  :custom
  (epa-pinentry-mode 'loopback)
  (epa-file-cache-passphrase-for-symmetric-encryption t))
#+end_src

* Controlling
** Window and Frame

By enabling ~winner-mode~, you can restore to previous window configuration by
typing ~C-c <left>~.

#+begin_src emacs-lisp
(use-package winner
  ;; restore windows configuration, built-in package
  :commands winner-mode
  :config
  (winner-mode t))
#+end_src

When type ~C-x m w~ it will create a new frame with the default frame
configuration.

The frame is inactive when emacsclientw connects to the daemon at the first
time. So I add ~raise-frame~ in ~after-make-frame-functions~ to force emacs to bring
the new frame to the front.

#+begin_src emacs-lisp
(use-package frame
  :ensure nil
  :defer 1
  :bind ("C-x m w" . make-frame)
  :config
  (add-hook 'after-make-frame-functions
            (lambda (frame)
              (select-frame frame)
              (kimim/menu-and-bar)
              (kimim/frame-and-font)
              (raise-frame frame))))
#+end_src

preserve the point in screen during scrolling looks nice(see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Scrolling.html][scrolling]]). scroll
slowly with touchpad, thus we adjust the scroll amount.

#+begin_src emacs-lisp
(setq scroll-preserve-screen-position t)
(setq mouse-wheel-scroll-amount '(0.01))
#+end_src

** Command

Display key candidates when you typed part key prefix with ~which-key-mode~.

#+begin_src emacs-lisp
;; https://github.com/justbur/emacs-which-key
(use-package which-key
  :defer 3
  :diminish which-key-mode
  :custom (which-key-popup-type 'minibuffer)
  :config
  (which-key-mode 1))
#+end_src

List recent used commands with ~smex~:

#+begin_src emacs-lisp

;; smex will list the recent function on top of the cmd list
(use-package smex
  :commands (smex)
  :config
  (smex-initialize))
#+end_src

~counsel~ will enhance many built-in commands with nice ivy completion candidates.

#+begin_src emacs-lisp
(use-package counsel
  :defer 5
  :bind
  (("M-x" . counsel-M-x)
   ("C-x C-f" . counsel-find-file)
   ("C-x m f" . counsel-describe-function)
   ("C-x m v" . counsel-describe-variable)
   ("C-x m l" . counsel-load-library)
   ("C-x m i" . counsel-info-lookup-symbol)
   ("C-x m j" . counsel-bookmark)
   ("C-x m u" . counsel-unicode-char)
   ("C-c j" . counsel-git-grep)
   ("C-c g" . counsel-grep)
   ("C-x b" . counsel-ibuffer)
   ("C-c k" . counsel-ag)
   ("C-c p" . counsel-pt)
   ("C-x l" . counsel-locate)
   :map read-expression-map
   ("C-r" . counsel-minibuffer-history))
  :config
  (require 'ivy)
  (require 'smex)
  (add-hook 'counsel-grep-post-action-hook 'recenter))
#+end_src

** guru mode

~guru-mode~ warns you when you type arrow keys, home or end. This could help you
to establish the habit of efficiently using emacs keybinding.

#+begin_src emacs-lisp
(use-package guru-mode
  :ensure t
  :defer 1
  :diminish guru-mode
  :config
  (guru-global-mode +1))
#+end_src

** Key Frequency

We will use =keyfreq= to record the frequency of the key typing, and get a
frequency report by =M-x keyfreq-show=.

#+begin_src emacs-lisp
(use-package keyfreq
  :custom (keyfreq-file "~/.emacs.d/emacs.keyfreq")
  :config
  (keyfreq-mode +1)
  (keyfreq-autosave-mode +1))
#+end_src

** eshell

#+begin_src emacs-lisp
(use-package company-shell
  :commands company-shell)

(use-package eshell
  :config
  (add-hook 'eshell-mode-hook
            (lambda ()
              (setq company-backends
                    '((company-shell company-files)
                      company-capf company-yasnippet company-dabbrev company-ebdb company-ispell
                      (company-dabbrev-code company-gtags company-etags company-keywords))))))
#+end_src

* Editing
** Input Method

#+begin_src emacs-lisp
(use-package rime
  :bind ("C-;" . toggle-input-method)
  :custom
  (default-input-method "rime")
  (rime-disable-predicates
   '(rime-predicate-after-alphabet-char-p))
  (rime-show-candidate 'posframe)
  (rime-posframe-properties
   (list :font "YaheiInconsolata-18"
         :internal-border-width 14))
  :config
  (when (eq (window-system) 'mac)
    (setq rime-librime-root "~/.emacs.d/librime/dist")))
#+end_src

** General

#+begin_src emacs-lisp
(use-package autorevert
  :ensure nil
  :diminish auto-revert-mode)
#+end_src

#+begin_src emacs-lisp
(setq inhibit-eol-conversion nil)
;; fill-column is a buffer-local variable
;; use setq-default to change it globally
(if window-system
    (setq-default fill-column
                  (min 70
                       (ceiling
                        (/ (x-display-pixel-width)
                           (frame-char-width)
                           2.3))))
  (setq-default fill-column 70))
(use-package drag-stuff
  :diminish drag-stuff-mode
  :config
  (drag-stuff-global-mode 1))
(delete-selection-mode 1)
(setq kill-ring-max 200)
(setq kill-whole-line t)
(setq require-final-newline t)
(setq-default tab-width 4)
(setq tab-stop-list
      (number-sequence 4 120 4))
;; stretch to tab width when on tab
(setq x-stretch-cursor t)
(setq track-eol t)
(setq backup-directory-alist '(("." . "~/temp")))
(setq version-control t)
(setq kept-old-versions 10)
(setq kept-new-versions 20)
(setq delete-old-versions t)
(setq backup-by-copying t)

(setq auto-save-interval 50)
(setq auto-save-timeout 60)
(setq auto-save-default nil)
(setq auto-save-list-file-prefix "~/temp/auto-saves-")
(setq auto-save-file-name-transforms `((".*"  , "~/temp/")))
(setq create-lockfiles nil)
(use-package time-stamp
  :config
  (setq time-stamp-active t)
  (setq time-stamp-warn-inactive t)
  (setq time-stamp-format "%:y-%02m-%02d %3a %02H:%02M:%02S Kimi MA")
  (add-hook 'write-file-functions 'time-stamp))

(defun kimim/save-buffer-advice (orig-fun &rest arg)
  (delete-trailing-whitespace)
  (apply orig-fun arg))

(advice-add 'save-buffer :around #'kimim/save-buffer-advice)

(diminish 'visual-line-mode)
(add-hook 'text-mode-hook
          (lambda ()
            (when (derived-mode-p 'org-mode 'markdown-mode
                                  'text-mode 'info-mode)
              (visual-line-mode)
              (setq line-spacing 0.4))))
(setq-default indent-tabs-mode nil)

(setq uniquify-buffer-name-style 'forward)
(setq suggest-key-bindings 5)

(add-to-list 'auto-mode-alist '("\\.css\\'" . css-mode))
(add-to-list 'auto-mode-alist '("\\.S\\'" . asm-mode))
(add-to-list 'auto-mode-alist '("\\.svg\\'" . html-mode))
(add-to-list 'auto-mode-alist '("\\.pas\\'" . delphi-mode))

(require 'saveplace)
(setq-default save-place t)
(setq save-place-file (expand-file-name "saveplace" "~"))
#+end_src

** undo-tree

~C-x u~ is undo command, now it is rebind to ~undo-tree~, when it is invoked, emacs
will show the undo tree of current buffer.

#+begin_src emacs-lisp
(use-package undo-tree
  :bind ("C-x u" . undo-tree)
  :diminish undo-tree-mode
  :custom (undo-tree-visualizer-timestamps t)
  :config
  (global-undo-tree-mode))
#+end_src

** multi cursors

You can mark a region, and ~C-S-c C-S-c~ to start edit every line in this
region. That's amazing.

#+begin_src emacs-lisp
(use-package multiple-cursors
  :defer 5
  :bind
  ("C-S-c C-S-c" . mc/edit-lines)
  ("C->" . mc/mark-next-like-this)
  ("C-<" . mc/mark-previous-like-this)
  ("C-c C-<" . mc/mark-all-like-this)
  ("C-c C->" . mc/mark-all-dwim))
#+end_src

** visual-fill-column

Markdown file is not fill-column'ed, so let emacs visually
fill-column.

#+begin_src emacs-lisp
(use-package visual-fill-column
  :hook (markdown-mode . visual-fill-column-mode))
#+end_src

* File Management
** delete files

To avoid accidentally delete files, let emacs move the deleted file to trash.

#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t)
#+end_src

** dired

#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :defines (dired-omit-localp
            dired-omit-files)
  :functions (dired-omit-mode
              dired-dwim-target-directory)
  :custom
  (dired-listing-switches "-AGhlgov")
  (dired-recursive-copies t)
  (dired-recursive-deletes t)
  (ls-lisp-dirs-first t)
  (dired-create-destination-dirs 'ask)
  (dired-dwim-target t)
  :bind
  (("C-x C-j" . dired-jump)
   :map dired-mode-map
   ("<left>" . dired-up-directory)
   ("<right>" . dired-find-file)
   ("b" . dired-up-directory)
   ("e" . dired-efap)
   ("o" . kimim/open-external)
   ("M-n" . dired-narrow)
   ("M-c" . compose-attach-marked-files)
   ("C-q" . kill-dired-buffers)
   ("<tab>" . kimim/dired-other-window))
  :config
  (require 'dired-filter)
  (require 'dired-recent)
  (require 'dired-x)
  (add-hook 'dired-mode-hook
            (lambda ()
              (turn-on-gnus-dired-mode)
              ;; Set dired-x buffer-local variables here.  For example:
              (dired-omit-mode 1)
              (dired-filter-mode 1)
              (hl-line-mode 1)
              (setq dired-omit-localp t)
              (setq dired-omit-files
                    (concat "|desktop.ini"
                            "\\|NTUSER\\|ntuser"
                            "\\|Cookies\\|AppData"
                            "\\|Contacts\\|Links"
                            "\\|Intel\\|NetHood"
                            "\\|PrintHood\\|Recent"
                            "\\|Start\\|SendTo"
                            "\\|^\\.DS_Store"
                            "\\|qms-bmh"))))
  (if (eq system-type 'darwin)
      (setq dired-listing-switches "-Avhlgo"))

  (defun compose-attach-marked-files ()
    "Compose mail and attach all the marked files from a dired buffer."
    (interactive)
    (let ((files (dired-get-marked-files))
          (file-names (dired-copy-filename-as-kill)))
      (compose-mail nil (concat "Attachments: " file-names) nil t)
      (dolist (file files)
        (if (file-regular-p file)
            (mml-attach-file file
                             (mm-default-file-type file)
                             nil "attachment")
          (message "skipping non-regular file %s" file)))))

  (defadvice dired-next-line (after dired-next-line-advice (arg) activate)
    "Move down lines then position at filename, advice"
    (interactive "p")
    (if (eobp)
        (progn
          (goto-char (point-min))
          (forward-line 2)
          (dired-move-to-filename))))

  (defadvice dired-previous-line (before dired-previous-line-advice (arg) activate)
    "Move up lines then position at filename, advice"
    (interactive "p")
    (if (= 3 (line-number-at-pos))
        (goto-char (point-max))))

  (defun kimim/dired-other-window ()
    (interactive)
    (let ((other-dired-buffer (dired-dwim-target-directory)))
      (if other-dired-buffer
          (dired-other-window other-dired-buffer)
        (dired-jump-other-window)))))
#+end_src

** dired-recent

Keep a list of recently visited directories. Then we can quickly revisit them.

#+begin_src emacs-lisp
(use-package dired-recent
  :config
  (dired-recent-mode 1))
#+end_src

** dired-efap

dired-efap, Edit file at point, can be used to rename file name at the point:

#+begin_src emacs-lisp
(use-package dired-efap
  :commands dired-efap)
#+end_src

** dired-narrow

~M-n~ will prompt for strings to narrow the files in current dired buffer.

#+begin_src emacs-lisp
(use-package dired-narrow
  :commands dired-narrow)
#+end_src

** ibuffer

#+begin_src emacs-lisp
(use-package ibuffer
  :bind (("C-x C-b" . ibuffer-other-window)
         :map ibuffer-mode-map
         ("<right>" . ibuffer-visit-buffer))
  :custom
  (ibuffer-formats
   '((mark modified read-only " "
           (name 32 32 :left :elide)
           " "
           (size-h 9 -1 :right)
           " "
           (mode 14 14 :left :elide)
           " "
           filename-and-process)))
  :config
  ;; Use human readable Size column instead of original one
  (define-ibuffer-column size-h
    (:name "Size" :inline t)
    (cond
     ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
     ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
     ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
     (t (format "%8d" (buffer-size))))))
#+end_src

* Navigation

#+begin_src emacs-lisp
(use-package bookmark
  :custom
  (bookmark-default-file "~/.emacs.d/emacs.bmk")
  (bookmark-save-flag 1)
  (bookmark-fontify nil)
  :config
  (add-hook 'bookmark-after-jump-hook
            (lambda ()
              (recenter 'top))))
#+end_src

~bm~ is used to temporally toggle buffer local bookmarks with ~C-x m t~, then you
can view all the local temporally bookmarks with ~C-x m s~.

#+begin_src emacs-lisp
(use-package bm
  :bind (("C-x m t" . bm-toggle)
         ("C-x m s" . bm-show-all)
         ("C-x m <left>" . bm-previous)
         ("C-x m <right>" . bm-next)))
#+end_src

You can jump to any character by triggering ~ace-jump-mode~ (~C-x m c~), and jump to
any window by triggering ~ace-window~ (~C-x m w~).

#+begin_src emacs-lisp
(use-package ace-jump-mode
  :bind
  ("C-x m c" . ace-jump-mode))

(use-package ace-window
  :bind
  (("M-o" . ace-window)
   ("C-x o" . ace-window)
   ("C-x m w" . ace-swap-window)
   ("C-x m x" . ace-delete-window))
  :custom
  (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src

* Search and Finding
** swiper replaces isearch

#+begin_src emacs-lisp
(use-package swiper
  :custom
  (swiper-action-recenter t)
  :bind
  ("C-s" . swiper)
  ("M-s ." . swiper-thing-at-point))
#+end_src

** ag: the silver searcher

=ag= [fn:12] is really a very fast grep tool, and =ag.el= [fn:13] provide the
Emacs interface to =ag=:

#+begin_src emacs-lisp
(use-package ag
  :bind
  ("C-x g" . ag-project)
  :config
  (setq ag-highlight-search t))
#+end_src

** pt: the platium searcher

Because =counsel-ag= is not working in my Win64 machine, so I switch to =pt=
now.

Download =pt= from
https://github.com/monochromegane/the_platinum_searcher/releases, and it works
out of the box.

** imenu & imenu-anywhere

=imenu= is used to navigate the function definitions in current buffer.

#+begin_src emacs-lisp
(use-package imenu
  :functions kimim/imenu-default-goto-function-advice
  :config
  (advice-add 'imenu-default-goto-function
              :around
              #'kimim/imenu-default-goto-function-advice))

(use-package imenu-anywhere
  :bind ("C-c i" . imenu-anywhere))
#+end_src

** search from web

#+begin_src emacs-lisp
(use-package eww
  :custom
  (eww-search-prefix "https://cn.bing.com/search?q="))
#+end_src

* auto-complete
** abbrev

#+begin_src emacs-lisp
(diminish 'abbrev-mode)
#+end_src

** ivy-mode

#+begin_src emacs-lisp
(use-package ivy
  :diminish ivy-mode
  :bind ("<f6>" . ivy-resume)
  :config
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-wrap nil)
  (ivy-mode 1))
#+end_src

** ivy-bibtex

#+begin_src emacs-lisp
(use-package ivy-bibtex)
#+end_src

** yasnippet

#+begin_src emacs-lisp
(use-package yasnippet
  :defer 10
  :diminish yas-minor-mode
  :config
  (require 'warnings)
  (add-to-list
   'yas-snippet-dirs (concat kimim/path-sync-emacs "snippets"))
  (yas-global-mode 1)
  (setq warning-suppress-types '((yasnippet backquote-change))))
#+end_src

In order to remove following warning:

#+BEGIN_QUOTE
Warning (yasnippet): ‘xxx’ modified buffer in a backquote expression.
  To hide this warning, add (yasnippet backquote-change) to ‘warning-suppress-types’.
#+END_QUOTE

** company mode

English word list fetch from https://github.com/dwyl/english-words

#+begin_src emacs-lisp
(use-package company-try-hard
  :bind ("C-\\" . company-try-hard))

(use-package company
  :defer 0
  :functions (company-complete-common-or-cycle
              company-abort)
  :bind (:map company-active-map
              ("C-n" . company--select-next-and-warn)
              ("C-p" . company--select-previous-and-warn)
              ("SPC" . (lambda ()
                         (interactive)
                         (company-abort)
                         (insert-char ?\x20))))
  :diminish company-mode
  :commands (global-company-mode)
  :config
  (require 'ispell)
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 1)
  ;; macOS will use system dict file directly
  (global-company-mode t)
  (setq company-backends
        '((company-capf company-yasnippet company-files :separate)
          company-dabbrev company-ebdb company-ispell
          (company-dabbrev-code company-gtags company-etags company-keywords))))
#+end_src

** company statistics

Sort candidates using completion history.

#+begin_src emacs-lisp
(use-package company-statistics
  :config
  (company-statistics-mode 1))
#+end_src

#+begin_src emacs-lisp
(use-package company-ebdb)
#+end_src

* Programming General

** Project

~project-find-file~ (~C-x p f~) can find files of current project, indicated by git
or other version control information.

#+begin_src emacs-lisp
(use-package project)
#+end_src

** Compiling

#+begin_src emacs-lisp
(setq next-error-recenter 20)
(setq compilation-scroll-output t)
(bind-key "C-<f11>" 'compile)
#+end_src

** Version Control

Bind ~magit~ to ~C-x p m~ with the same prefix of ~project~, as they have strong
relationship.

#+begin_src emacs-lisp
(use-package magit
  :bind (("C-x p m" . magit))
  :custom (magit-log-show-refname-after-summary t))
#+end_src

Following error will reported when using magit to commit changes:

#+BEGIN_QUOTE
server-ensure-safe-dir: The directory ‘~/.emacs.d/server’ is unsafe
#+END_QUOTE

The solution is to change the owner of =~/.emacs.d/server= [fn:14]

#+BEGIN_QUOTE
Click R-mouse on ~/.emacs.d/server and select “Properties” (last item in
menu). From Properties select the Tab “Security” and then select the button
“Advanced”. Then select the Tab “Owner” and change the owner from
=“Administrators (\Administrators)”= into =“ (\”=. Now the server code will accept
this directory as secure because you are the owner.
#+END_QUOTE

** Parenthesis

~smartparens-mode~[fn:15] is a general purpose mode for dealing with
parenthesis. We define some keys for it:

#+begin_src emacs-lisp
(use-package smartparens
  :bind (:map
         smartparens-mode-map
         ("C-<right>" . sp-forward-slurp-sexp)
         ("C-<left>" . sp-forward-barf-sexp)
         ("M-<right>" . sp-backward-barf-sexp)
         ("M-<left>" . sp-backward-slurp-sexp)
         ("M-<up>" . sp-splice-sexp-killing-backward)
         ("M-<down>" . sp-splice-sexp-killing-forward)
         ("C-k" . sp-kill-hybrid-sexp)
         ("M-k" . sp-kill-sexp)
         ("<backspace>" . sp-backward-delete-char)
         ("C-d" . sp-delete-char)
         ("C-M-<backspace>" . sp-backward-copy-sexp)
         ("C-M-w" . sp-copy-sexp))
  :hook (prog-mode . smartparens-mode)
  :diminish smartparens-mode
  :config
  (sp-with-modes sp-lisp-modes
    ;; disable ', it's the quote character!
    (sp-local-pair "'" nil :actions nil)
    ;; disable ', it's the backquote character!
    (sp-local-pair "`" nil :actions nil)
    ;; also only use the pseudo-quote inside strings where it
    ;; serves as hyperlink.
    (sp-local-pair "`" "'" :when '(sp-in-string-p sp-in-comment-p))))
#+end_src

** Code folding

With ~yafolding-mode~, you can:
- toggle the code folding with ~yafolding-toggle-element~ (~C-<return>~)
- toggle global folding with ~yafolding-toggle-all~ (~C-M-<return>~)

#+begin_src emacs-lisp
(use-package yafolding
  :hook (prog-mode . yafolding-mode))
#+end_src

** static code analysis

#+begin_src emacs-lisp
(use-package flycheck
  :commands (global-flycheck-mode)
  :custom
  (flycheck-global-modes '(not org-mode)))
#+end_src

** lsp mode

~lsp-mode~ aims to provide IDE-like experience.

If you got error: =Symbol’s function definition is void: -compose=, make sure
that dash version higher than 2.18 is installed[fn:16].

#+begin_src emacs-lisp
(use-package dash
  :ensure t)
#+end_src

#+begin_src emacs-lisp
(use-package lsp-mode
  :commands lsp
  :custom
  (lsp-headerline-breadcrumb-icons-enable nil)
  (lsp-headerline-breadcrumb-enable nil)
  (lsp-modeline-code-action-fallback-icon "★")
  :bind (:map
         lsp-mode-map
         ("C-x ." . lsp-find-definition)
         ("C-x ," . pop-tag-mark)
         ("C-." . kimim/lsp-find-definition-other-window))
  :hook ((clojure-mode . lsp)
         (c-mode . lsp)
         (c++-mode . lsp)
         (go-mode . lsp)
         (rustic-mode . lsp))
  :config
  (require 'dash)
  (defun kimim/lsp-find-definition-other-window ()
    (interactive)
    (lsp-find-definition :display-action 'window)
    (other-window 1)))

(use-package lsp-ui
  :commands lsp-ui-mode
  :custom
  (lsp-ui-doc-alignment 'window)
  (lsp-ui-doc-max-width 80))
#+end_src

** eldoc

#+begin_src emacs-lisp
(use-package eldoc
  :hook prog-mode
  :diminish eldoc-mode)
#+end_src

** cmake mode

#+begin_src emacs-lisp
(use-package cmake-mode
  :config
  (delete '("CMakeLists\\.txt\\'" . cmake-mode) auto-mode-alist)
  (setq auto-mode-alist
        (append '(("CMakeLists\\.txt\\'" . cmake-mode))
                auto-mode-alist)))
#+end_src

* Programming Language

** C

#+begin_src emacs-lisp
(use-package clang-format)
#+end_src

#+begin_src emacs-lisp
(use-package cc-mode
  :ensure nil
  :defines c++-mode-map
  :bind (:map
         c++-mode-map
         ("C-<tab>" . clang-format))
  :config
  (require 'clang-format)
  (add-to-list 'auto-mode-alist '("\\.c\\'" . c-mode))
  (org-babel-do-load-languages 'org-babel-load-languages '((C . t)))
  (add-hook 'c-mode-common-hook
            (lambda ()
              ;;(c-set-style "gnu")
              ;;(c-toggle-auto-newline 0)
              ;;(c-toggle-auto-hungry-state 0)
              ;;(c-toggle-syntactic-indentation 1)
              ;;(highlight-indentation-mode 1)
              (which-function-mode 1)
              (local-set-key "\C-co" 'ff-find-other-file))))
#+end_src

** C#

#+begin_src emacs-lisp
(use-package csharp-mode
  :mode ("\\.cs\\'" . csharp-mode))
#+end_src


** Clojure

Clojure[fn:17] is a lisp over JVM. Emm, I like it.

#+begin_src emacs-lisp
(use-package clojure-mode
  :mode (("\\.cljs\\'" . clojurescript-mode)
         ("\\.\\(clj\\|dtm\\|edn\\)\\'" . clojure-mode)
         ("\\.cljc\\'" . clojurec-mode)
         ("\\(?:build\\|profile\\)\\.boot\\'" . clojure-mode))
  :config
  (require 'cider)
  (require 'company)
  (require 'flycheck)
  (require 'flycheck-clj-kondo)
  (require 'clj-refactor)
  (require 'clojure-snippets)
  (require 'clojure-mode-extra-font-locking)
  (require 'lsp-mode)
  (org-babel-do-load-languages 'org-babel-load-languages '((clojure . t)))
  (add-hook 'cider-repl-mode-hook #'company-mode)
  (add-hook 'cider-mode-hook #'company-mode)
  (add-hook 'clojure-mode-hook #'cider-mode)
  (add-hook 'clojure-mode-hook #'lsp)
  (add-hook 'clojure-mode-hook #'clj-refactor-mode)
  (add-hook 'clojurec-mode-hook #'cider-mode)
  (add-hook 'clojurec-mode-hook #'lsp)
  (add-hook 'clojurec-mode-hook #'clj-refactor-mode)
  (add-hook 'clojurescript-mode-hook #'cider-mode)
  (add-hook 'clojurescript-mode-hook #'lsp)
  (add-hook 'clojurescript-mode-hook #'clj-refactor-mode))
#+end_src

*** clj-kondo

Install with npm:

#+begin_src shell
npm install -g clj-kondo
#+end_src

#+begin_src emacs-lisp
(use-package flycheck-clj-kondo)
#+end_src

*** Cider

Cider[fn:18] extends Emacs with support for interactive programming
in Clojure.

#+begin_src emacs-lisp
(use-package cider
  :functions tramp-dissect-file-name
  :custom ((cider-clojure-cli-command "clojure")
           (nrepl-use-ssh-fallback-for-remote-hosts t)
           (nrepl-sync-request-timeout 100))
  :config
  ;;(setq cider-interactive-eval-output-destination 'output-buffer)
  (defun nrepl--ssh-tunnel-command (ssh dir port)
    "Command string to open SSH tunnel to the host associated with DIR's PORT."
    (with-parsed-tramp-file-name dir v
      ;; this abuses the -v option for ssh to get output when the port
      ;; forwarding is set up, which is used to synchronise on, so that
      ;; the port forwarding is up when we try to connect.
      (format-spec
       "%s -v -N -L %p:localhost:%p %u'%h' %x"
       `((?s . ,ssh)
         (?p . ,port)
         (?h . ,v-host)
         (?u . ,(if v-user (format "-l '%s' " v-user) ""))
         (?x . "-o \"ProxyCommand=nc -X connect -x 127.0.0.1:1080 %h %p\""))))))
#+end_src

#+begin_src emacs-lisp
(use-package ob-clojure
  :ensure org
  :config
  (require 'clojure-mode)
  (require 'cider)
  (setq org-babel-clojure-backend 'cider))
#+end_src

*** clj-refactor

#+begin_src emacs-lisp
(use-package clj-refactor
  :defer t
  :config
  (setq clojure-thread-all-but-last t)
  (cljr-add-keybindings-with-prefix "C-c r")
  (define-key clj-refactor-map "\C-ctf" #'clojure-thread-first-all)
  (define-key clj-refactor-map "\C-ctl" #'clojure-thread-last-all)
  (define-key clj-refactor-map "\C-cu" #'clojure-unwind)
  (define-key clj-refactor-map "\C-cU" #'clojure-unwind-all)
  (add-to-list 'cljr-magic-require-namespaces '("s"  . "clojure.string")))
#+end_src

** Java

#+begin_src emacs-lisp
(use-package lsp-java)
#+end_src

** Python

Python development configuration is quite easy. =elpy= [fn:19] is used here:

#+begin_src emacs-lisp
  (use-package elpy
    :config
    (elpy-enable))

  (use-package python
    :ensure nil
    :defines elpy-rpc-backend
    :mode ("\\.py\\'" . python-mode)
    :interpreter ("python" . python-mode)
    :config
    (add-hook 'python-mode-hook
              (lambda ()
                (setq yas-indent-line nil)))
    (add-to-list 'python-shell-completion-native-disabled-interpreters "python"))

  (use-package company-jedi
    :config
    (setq elpy-rpc-backend "jedi"))
#+end_src

Following =python= package is required according to =elpy= mannual:

#+begin_src shell
pip install rope
pip install jedi
# flake8 for code checks
pip install flake8
# importmagic for automatic imports
pip install importmagic
# and autopep8 for automatic PEP8 formatting
pip install autopep8
# and yapf for code formatting
pip install yapf
# install virtualenv for jedi
pip install virtualenv
#+end_src

** Rust

The easiest way to install rust is to run following script:

#+begin_src shell
curl https://sh.rustup.rs -sSf | sh
#+end_src

#+begin_src emacs-lisp
(use-package rustic
  :config
  (add-hook 'rustic-mode-hook
            (lambda ()
	          (set (make-local-variable 'compile-command)
		           "cargo run"))))
#+end_src

** Swift

#+begin_src emacs-lisp
  (use-package swift-mode
    :mode ("\\.swift\\'" . swift-mode))
#+end_src

** Golang
Open =.go= file with go-mode.
#+begin_src emacs-lisp
  (use-package go-mode
    :mode ("\\.go\\'" . go-mode))
#+end_src

** Docker file

Some dockerfile is not end with =.dockerfile=, so lets guess:

#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :mode ("\\dockerfile\\'" . dockerfile-mode))
#+end_src

** Emacs lisp

#+begin_src emacs-lisp
(use-package elisp-mode
  :ensure nil
  :mode ("\\.el\\'" . emacs-lisp-mode)
  :config
  (define-derived-mode lisp-interaction-mode emacs-lisp-mode "ᴧ"))
#+end_src

** AutoHotKey

=ahk-mode= developed by Rich Alesi[fn:20]

#+begin_src emacs-lisp
  (use-package ahk-mode
    :mode ("\\.ahk\\'" . ahk-mode))
#+end_src

** yaml mode

#+begin_src emacs-lisp
(use-package yaml-mode
  :mode ("\\.yml\\'" . yaml-mode)
  :bind (:map
         yaml-mode-map
         ("\C-m" . newline-and-indent)))
#+end_src

** shell

#+begin_src emacs-lisp
(use-package shell
  :config
  (org-babel-do-load-languages 'org-babel-load-languages '((shell . t))))
#+end_src

** powershell

#+begin_src emacs-lisp
(use-package powershell
  :mode ("\\.ps1\\'" . powershell-mode))
#+end_src



* Draw diagram in code
** PlantUML

That's fun to draw UML with =ob-plantuml= inside =orgmode=:

For Windows Cygwin, install =graphviz= in =cygwin= setup tool

For macOS, install =graphviz= with homebrew:
#+begin_src shell
brew install graphviz
#+end_src

Download =plantuml.jar= from https://plantuml.com/download, and put it to some
place and assign ~plantuml-jar-path~ to there.

#+begin_src emacs-lisp
(use-package plantuml-mode
  :custom
  (plantuml-default-exec-mode 'jar)
  (plantuml-jar-path (expand-file-name
                      (concat kimim/path-kimikit "plantuml/plantuml.jar")))
  (plantuml-executable-args "-headless -charset UTF-8"))
#+end_src

#+begin_src emacs-lisp
  (use-package ob-plantuml
    :ensure nil
    :config
    (require 'plantuml-mode)
    ;; WARNING: if variables are from other package, setq them at :config
    (setq org-plantuml-jar-path plantuml-jar-path)
    (setq org-plantuml-executable-args plantuml-executable-args)
    (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t))))
#+end_src

** ditaa

#+begin_src emacs-lisp
(use-package ob-ditaa
  :ensure nil
  :custom
  (org-ditaa-jar-path
        (expand-file-name
         (concat kimim/path-kimikit "ditaa/ditaa.jar")))
  :config
  (org-babel-do-load-languages 'org-babel-load-languages '((ditaa . t))))
#+end_src
* Calendar

#+begin_src emacs-lisp
(when (not (boundp 'kimim/file-diary))
  (defvar kimim/file-diary (concat kimim/path-org "diary"))
  (if (not (file-exists-p kimim/file-diary))
      (write-region "" nil kimim/file-diary)))
#+end_src

#+begin_src emacs-lisp
(use-package calendar
  :custom
  (diary-file kimim/file-diary)
  (calendar-latitude +30.16)
  (calendar-longitude +120.12)
  (calendar-location-name "Hangzhou")
  (calendar-remove-frame-by-deleting t)
  (calendar-week-start-day 1)
  (calendar-mark-holidays-flag t)
  (holiday-christian-holidays nil)
  (holiday-hebrew-holidays nil)
  (holiday-islamic-holidays nil)
  (holiday-solar-holidays nil)
  (holiday-bahai-holidays nil)
  (holiday-general-holidays
   '((holiday-fixed 1 1 "元旦")
     (holiday-float 5 0 2 "父親節")
     (holiday-float 6 0 3 "母親節")))
  (calendar-mark-diary-entries-flag t)
  (calendar-view-holidays-initially-flag nil)
  (calendar-chinese-celestial-stem
   ["甲" "乙" "丙" "丁" "戊" "己" "庚" "辛" "壬" "癸"])
  (calendar-chinese-terrestrial-branch
   ["子" "丑" "寅" "卯" "辰" "巳" "午" "未" "申" "酉" "戌" "亥"]))
#+end_src

* Orgmode
** org general setting

#+begin_src emacs-lisp
(use-package org
  :mode (("\\.txt\\'" . org-mode)
         ("\\.org\\'" . org-mode))
  :bind
  (:map
   org-mode-map
   ("C-c b" . org-iswitchb)
   ("C-c l" . org-store-link)
   ("C-c  ！" . org-time-stamp-inactive)
   ("C-c  。" . org-time-stamp)
   ("M-." . org-open-at-point)
   ("M-*" . org-mark-ring-last-goto)
   ("M-h" . nil))
  :custom
  (org-modules '(org-habit
                 ol-w3m ol-bbdb ol-bibtex
                 ol-docview ol-gnus ol-info
                 ol-irc ol-mhe ol-rmail ol-eww))
  (org-export-with-sub-superscripts "{}")
  (org-startup-folded 'showall)
  :config
  (setq company-minimum-prefix-length 2)
  (setq org-hide-emphasis-markers t)
  (setq org-support-shift-select t)
  ;; no empty line after collapsed
  (setq org-cycle-separator-lines 0)
  (if window-system
      (setq org-startup-indented t)
    (setq org-startup-indented nil))
  (setq org-image-actual-width 750))
#+end_src

** org-appear

#+begin_src emacs-lisp
(use-package org-appear
  :commands (org-appear-mode)
  :ensure t
  :custom (org-appear-autolinks nil)
  :hook (org-mode . org-appear-mode))
#+end_src

** org-superstar

#+begin_src emacs-lisp
(use-package org-superstar
  :ensure t
  :hook ((org-mode . org-superstar-mode)
         (org-mode . (lambda ()
                       "Beautify Org Checkbox Symbol"
                       (push '("[ ]" . "☐") prettify-symbols-alist)
                       (push '("[X]" . "☑" ) prettify-symbols-alist)
                       (push '("#+begin_src" . "«" ) prettify-symbols-alist)
                       (push '("#+end_src" . "»" ) prettify-symbols-alist)
                       (prettify-symbols-mode))))
  :custom
  (org-superstar-remove-leading-stars t)
  (org-superstar-headline-bullets-list
   '(9673 9675 9679 9632))
  (org-superstar-item-bullet-alist
   '((42 . 9679) (43 . 9830) (45 . 9644))))
#+end_src

** org-indent

#+begin_src emacs-lisp
(use-package org-indent
  :ensure nil
  :hook (org-mode . org-indent-mode)
  :diminish org-indent-mode
  :config
  (defun org-indent--compute-prefixes ()
    "Compute prefix strings for regular text and headlines."
    (setq org-indent--heading-line-prefixes
	      (make-vector org-indent--deepest-level nil))
    (setq org-indent--inlinetask-line-prefixes
	      (make-vector org-indent--deepest-level nil))
    (setq org-indent--text-line-prefixes
	      (make-vector org-indent--deepest-level nil))
    (dotimes (n org-indent--deepest-level)
      (let ((indentation (if (<= n 1) 0
			               (* (1- org-indent-indentation-per-level)
			                  (1- n)))))
        ;; Headlines line prefixes.
        (let ((heading-prefix (make-string indentation ?*)))
	      (aset org-indent--heading-line-prefixes
	            n
	            (org-add-props heading-prefix nil 'face 'org-indent))
	      ;; Inline tasks line prefixes
	      (aset org-indent--inlinetask-line-prefixes
	            n
	            (cond ((<= n 1) "")
		              ((bound-and-true-p org-inlinetask-show-first-star)
		               (concat org-indent-inlinetask-first-star
			                   (substring heading-prefix 1)))
		              (t (org-add-props heading-prefix nil 'face 'org-indent)))))
        ;; Text line prefixes.
        (let ((remove-space (if (> n 0)
                                (- n 1)
                              0)))
          (aset org-indent--text-line-prefixes
	            n
	            (org-add-props
		            (concat (make-string (- (+ n indentation) remove-space) ?\s)
			                (and (> n 0)
			                     (char-to-string org-indent-boundary-char)))
		            nil 'face 'org-indent)))))))
#+end_src

** orgalist

#+begin_src emacs-lisp
  (use-package orgalist
    :commands (orgalist-mode))
#+end_src

** org for writing

#+begin_src emacs-lisp
(use-package org-download
  :commands (org-download-enable)
  :custom (org-download-heading nil)
  :functions kimim/org-download-annotate
  :config
  (setq org-download-timestamp "")
  (setq-default org-download-image-dir "./images")
  (setq org-download-method 'directory)

  (setq org-startup-with-inline-images nil)

  (defun kimim/org-download-annotate (link)
    "Annotate LINK with the time of download."
    (format "#+NAME: fig:%s\n#+CAPTION: %s\n"
            (file-name-base link) (file-name-base link)))
  (setq org-download-annotate-function #'kimim/org-download-annotate)
  (setq org-download-display-inline-images nil)
  (setq image-file-name-extensions
        (quote
         ("png" "jpeg" "jpg" "gif" "tiff" "tif" "xbm"
          "xpm" "pbm" "pgm" "ppm" "pnm" "svg" "pdf" "bmp")))
  (defun org-download--dir-2 () "."))
#+end_src

#+begin_src emacs-lisp
(use-package org
  :custom (org-num-skip-footnotes t)
  :config
  (require 'org-download)
  (require 'pangu-spacing)
  (setq org-hide-leading-stars t)
  (setq org-footnote-auto-adjust t)
  (setq org-footnote-define-inline nil)
  (define-key org-mode-map (kbd "C-c C-x h") (lambda ()
                                               (interactive)
                                               (insert "^{()}")
                                               (backward-char 2)))
  (define-key org-mode-map (kbd "C-c C-x l") (lambda ()
                                               (interactive)
                                               (insert "_{}")
                                               (backward-char 1))))
#+end_src

** org with source code

#+begin_src emacs-lisp
(use-package org
  :config
  (add-to-list 'org-src-lang-modes '("C" . c))
  (add-to-list 'org-src-lang-modes '("clojure" . clojure))
  (add-to-list 'org-src-lang-modes '("shell" . shell))
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (add-to-list 'org-src-lang-modes '("ditaa" . artist))
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((C . t)
      (clojure . t)
      (shell . t)
      (plantuml . t)
      (ditaa . t)))
  (setq org-src-window-setup 'current-window)
  (setq org-src-fontify-natively t)
  (setq org-src-preserve-indentation t)
  (setq org-edit-src-content-indentation 0)
  (setq org-confirm-babel-evaluate nil)
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images))
#+end_src

** org exporting

When exporting, do not export with author and date.

#+begin_src emacs-lisp
(use-package org
  :bind ("C-c C-'" . org-insert-structure-template)
  :custom
  (org-export-allow-BIND t)
  (org-export-html-validation-link nil)
  ;;(org-export-with-sub-superscripts '{})
  (org-export-with-author t)
  (org-export-with-date t)
  :config
  (require 'ox-latex))
#+end_src

*** org to pdf

LaTeX is required to convert =org-mode= to PDF.

For MacOS:

#+begin_src shell
brew cask install mactex-no-gui
#+end_src

For Windows, there are three options:

1. download and install CTEX from http://www.ctex.org
2. install texlive-collection in cygwin
   #+begin_src shell
apt-cyg install texlive-collection-xetex    \
        texlive-collection-latex            \
        texlive-collection-fontsrecommended
   #+end_src
3. download and install texlive from [[http://tug.org/texlive/acquire-netinstall.html][tug.org]]

For Linux, download texlive install pacakge from [[http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz][ctan.org]]

#+begin_src shell
tar zxvf install-tl-unx.tar.gz
cd install-tl-20200908/
sudo ./install-tl
#+end_src

Then for all the OS platforms, use =tlmgr= to install user level tex
packages (notes that, in windows, you may need to run =tlmgr.bat=):

#+begin_src shell
tlmgr init-usertree
tlmgr --usermode install ctex titlesec enumitem ms fontspec abstract    \
                         zhnumber fandol lastpage pdftexcmds infwarerr  \
                         minted fvextra etoolbox fancyvrb upquote       \
                         lineno catchfile xstring framed float          \
                         grffile wrapfig ulem lettrine minifp           \
                         capt-of xcolor svg koma-script trimspaces      \
                         titling layaureo parskip extsizes pgf          \
                         moderncv microtype
fmtutil-sys --all
#+end_src

Recently, I adopted to mainly use texlive on Windows. It works fine and provide
a GUI tool to maintain packages: ~tlshell.exe~. You can use it to install and
update latex packages.

To export =org-mode= to PDF, with code style highlight, you need to install
=python= and =pygments=. Because =pygmentize= from =pygments= is used to
generate =latex= markups for font highlighting.

For MacOS, the OS shipped =python2.7= does not accompanied with =pip= package
management script. So you need to install =pip=, and then add =pygments=,
acc. https://pip.pypa.io/en/stable/installing/ , =pygmentize= will be installed
under =$HOME/Library/Python/2.7/bin=, which is added to =exec-path= and =PATH.=

#+begin_src shell
curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
python get-pip.py
#+end_src

Get =pygments= with =pip=:

#+begin_src shell
pip install pygments
#+end_src

For Ubuntu Linux:

#+begin_src shell
sudo apt install python3-pygments
#+end_src

#+begin_src emacs-lisp
(use-package ox-latex
  :ensure nil
  :defines kimim/latex-classes
  :commands org-latex-publish-to-pdf
  :diminish org-beamer-mode
  :custom
  (org-latex-image-default-height "0.75\\textheight")
  (org-latex-image-default-width "\\linewidth")
  (org-latex-listings 'minted)
  (org-latex-minted-options
   '(("frame" "single") ("fontsize" "\\small")))
  (org-latex-pdf-process
   '("latexmk -xelatex -shell-escape %f"))
  :config
  (require 'org-ref)
  (require 'ox)
  (require 'ox-beamer)
  (setq org-startup-with-beamer-mode t)
  (setq org-beamer-frame-level 2)
  ;; export quotes match
  (setq org-export-with-smart-quotes t)
  (add-to-list 'org-latex-minted-langs
               '(plantuml "text"))
  (add-to-list 'org-latex-minted-langs
               '(ditaa "text"))
  (defun ref-headline-removal (backend)
    "Remove reference headline with tag: ref"
    (org-map-entries
     (lambda ()
       (when (member "ref" org-scanner-tags)
         (delete-region (point) (line-beginning-position 2))))))
  (add-hook 'org-export-before-parsing-hook 'ref-headline-removal)

  ;;;;; Nicolas Goaziou, http://article.gmane.org/gmane.emacs.orgmode/67692
  ;; (defun org-latex-ignore-heading-filter-headline (headline backend info)
  ;;   "Strip headline from HEADLINE. Ignore BACKEND and INFO."
  ;;   (when (and (org-export-derived-backend-p backend 'latex)
  ;;              (string-match "\\`.*ignoreheading.*\n" headline))
  ;;     (replace-match "" nil nil headline)))
  ;; (add-to-list 'org-export-filter-headline-functions
  ;;              'org-latex-ignore-heading-filter-headline)

  ;; most of the time, I do not need table of contents
  (setq org-latex-toc-command nil)
  ;; https://www.tuicool.com/articles/ZnAnym
  ;; remove error: ! LaTeX Error: Command \nobreakspace unavailable in encoding T1.
  ;; add: \DeclareRobustCommand\nobreakspace{\leavevmode\nobreak\ }
  ;; put long latex classes in a separate file
  (add-to-list 'load-path "~/kimim-emacs/site-lisp")
  (require 'latex-classes)
  (setq org-latex-classes kimim/latex-classes)
  (setq org-latex-default-class "article")
  ;; remove fontenc, and AUTO in front of inputenc,
  ;; then francais can be processed
  (setq org-latex-default-packages-alist
        (quote
         (("" "inputenc" t ("pdflatex"))
          ("" "minted" t nil)
          ("" "amsfonts" t nil)
          ("" "graphicx" t nil)
          ("inkscapeopt = -C --export-ignore-filters, inkscapelatex=false" "svg" t nil)
          ("" "grffile" t nil)
          ("" "longtable" nil nil)
          ("" "wrapfig" nil nil)
          ("" "rotating" nil nil)
          ("normalem" "ulem" t nil)
          ("" "amsmath" t nil)
          ("" "textcomp" t nil)
          ("" "lettrine" t nil)
          ("" "capt-of" nil nil))))
  (setq org-latex-packages-alist
        `(,(concat "\\addbibresource{"
                   (expand-file-name org-ref-default-bibliography)
                   "}"))))
#+end_src

*** org to html page

#+begin_src emacs-lisp
(use-package ox-html
  :ensure org
  :commands (org-html-publish-to-html)
  :config
  (setq org-html-validation-link nil)
  (defadvice org-html-paragraph (before fsh-org-html-paragraph-advice
                                        (paragraph contents info) activate)
    "Join consecutive Chinese lines into a single long line without
  unwanted space when exporting org-mode to html."
    (let ((fixed-contents)
          (orig-contents (ad-get-arg 1))
          (reg-han "[[:multibyte:]]"))
      (setq fixed-contents (replace-regexp-in-string
                            (concat "\\(" reg-han "\\) *\n *\\(" reg-han "\\)")
                            "\\1\\2" orig-contents))
      (ad-set-arg 1 fixed-contents))))
#+end_src

*** org to html slides

#+begin_src emacs-lisp
  (use-package org-re-reveal
    :bind ("C-x r v" . org-re-reveal-export-to-html-and-browse)
    :config
    (use-package htmlize :ensure t)
    (setq org-re-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js@3.9.2/")
    (setq org-re-reveal-theme "none")
    (setq org-re-reveal-width 1000)
    (setq org-re-reveal-height 750)
    (setq org-re-reveal-transition "none")
    (setq org-re-reveal-hlevel 2)
    (setq org-re-reveal-extra-css "./kimim.css"))
#+end_src

** org as GTD system

#+begin_src emacs-lisp
(use-package org-capture
  :ensure nil
  :custom
  (org-capture-templates
   '(("c" "Capture" entry (file+headline "capture.org" "Inbox")
      "* %?\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")
     ("t" "TODO Task"    entry (file+headline "capture.org" "Inbox")
      "* TODO %?\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")
     ("s" "SCHED Task"    entry (file+headline "capture.org" "Inbox")
      "* SCHED %?\nSCHEDULED: %t\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")
     ("o" "OPEN Issue"  entry (file+headline "capture.org" "Inbox")
      "* OPEN %?\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")
     ("w" "WAIT Task"    entry (file+headline "capture.org" "Inbox")
      "* WAIT %?\nSCHEDULED: %t\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")
     ("h" "Habit"   entry (file+headline "global.org"   "Habit")
      "* %?  :habit:\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n"))))
#+end_src

#+begin_src emacs-lisp
(use-package org
  :functions (org-agenda-kill-all-agenda-buffers
              org-agenda-todo
              org-agenda-error
              org-agenda-check-no-diary)
  :defines org-agenda-mode-map
  :commands (org-toggle-office org-toggle-home org-toggle-home-or-office)
  :bind (("C-c a" . org-agenda)
         ("C-c c" . org-capture)
         :map org-agenda-mode-map
         ("C-c C-k" . org-agenda-kill-files)
         ("<C-left>"  . org-agenda-do-date-earlier)
         ("<C-right>" . org-agenda-do-date-later)
         ("<S-left>" . (lambda ()
                         (interactive)
                         (org-agenda-todo 'left)))
         ("<S-right>" . (lambda ()
                          (interactive)
                          (org-agenda-todo 'right))))
  :custom
  (org-directory kimim/path-org)
  (org-agenda-files
   (file-expand-wildcards (concat kimim/path-org "*.org")))
  (org-tags-exclude-from-inheritance '("project" "category"))
  (org-log-done t)
  (org-fontify-done-headline nil)
  (org-todo-repeat-to-state "REPEAT")
  (org-deadline-warning-days 2)
  (org-todo-keywords
   '(
     ;; for tasks
     (sequence "TODO(t!)" "SCHED(s)" "|" "DONE(d@/!)")
     ;; for risks, actions, problems
     (sequence "OPEN(o!)" "WAIT(w@/!)" "|" "CLOSE(c@/!)")
     (sequence "|" "SOMEDAY(m)")
     (sequence "|" "ABORT(a@/!)")
     (sequence "REPEAT(r)" "|")))
  (org-tag-alist
   '(("@office" . ?o) ("@home" . ?h)
     ("team" . ?t) ("leader" . ?l)
     ("risk" . ?k)
     ("reading" . ?r) ("writing" . ?w)
     ("project" . ?p) ("category" . ?c)
     ("habit" . ?H)))
  (org-stuck-projects
   '("+LEVEL>=2-category-habit-info"
     ("TODO" "SCHED"  "DONE"
      "OPEN" "WAIT" "CLOSE"
      "ABORT" "SOMEDAY" "REPEAT")
     nil nil))
  (org-agenda-include-diary t)
  (org-agenda-span 2)
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-skip-deadline-if-done t)
  (org-agenda-custom-commands
   '(("t" todo "TODO|OPEN"
      ((org-agenda-sorting-strategy '(priority-down))))
     ("w" todo "SCHED|WAIT"
      ((org-agenda-sorting-strategy '(priority-down))))
     ;; all task should be done or doing
     ("d" todo "TODO|SCHED|OPEN|WAIT"
      ((org-agenda-sorting-strategy '(priority-down))))
     ("f" todo "SOMEDAY"
      ((org-agenda-sorting-strategy '(priority-down))))
     ("h" tags "habit/-ABORT-CLOSE"
      ((org-agenda-sorting-strategy '(todo-state-down))))
     ("c" tags "clock"
      ((org-agenda-sorting-strategy '(priority-down))))))
  :config
  (require 'ivy) ; use ivy to complete refile files
  (require 'org-capture)
  (require 'org-agenda)
  (add-hook 'kill-emacs-hook
            (lambda ()
              (org-clock-out nil t nil)
              (org-save-all-org-buffers)))
  ;; kill diary when exit agenda
  (advice-add 'org-agenda-exit
              :after (lambda () (kill-buffer "diary")))
  (diminish 'auto-fill-function)

  (setq org-refile-targets
        '(;; refile to maxlevel 2 of current file
          (nil . (:maxlevel . 1))
          ;; refile to maxlevel 1 of org-agenda-files
          (org-agenda-files :maxlevel . 1)
          ;; refile to item with 'project' tag in org-agenda-files
          (org-agenda-files :tag . "project")
          (org-agenda-files :tag . "category")))

  (defadvice org-schedule (after add-todo activate)
    (if (or (string= "OPEN" (org-get-todo-state))
            (string= "WAIT" (org-get-todo-state))
            (string= "CLOSE" (org-get-todo-state)))
        (org-todo "WAIT")
      (org-todo "SCHED")))

  (defadvice org-deadline (after add-todo activate)
    (if (or (string= "OPEN" (org-get-todo-state))
            (string= "WAIT" (org-get-todo-state))
            (string= "CLOSE" (org-get-todo-state)))
        (org-todo "WAIT")
      (org-todo "SCHED")))

  (add-hook 'org-agenda-after-show-hook 'org-narrow-to-subtree)

  (defun org-agenda-add-note (&optional arg)
    "Add a time-stamped note to the entry at point. DO NOT show other
headers when adding notes"
    (interactive "P")
    (org-agenda-check-no-diary)
    (let* ((marker (or (org-get-at-bol 'org-marker)
		               (org-agenda-error)))
	       (buffer (marker-buffer marker))
	       (pos (marker-position marker))
	       (hfdmarker (org-get-at-bol 'org-hd-marker))
	       (inhibit-read-only t))
      (with-current-buffer buffer
        (org-narrow-to-subtree) ;; change from widen to org-narrow-to-subtree
        (goto-char pos)
        (org-show-context 'agenda)
        (org-add-note))))

  (defun org-agenda-kill-files ()
    (interactive)
    (org-agenda-kill-all-agenda-buffers)
    (mapcar (lambda (file)
              (if-let (buf (get-file-buffer file))
                  (kill-buffer buf)))
            org-agenda-files)))
#+end_src

** org link: onenote

New link to use Office Onenote.

#+begin_src emacs-lisp
(use-package org
  :functions org-onenote-open
  :config
  (org-link-set-parameters "onenote"
                           :follow #'org-onenote-open)

  (defun org-onenote-open (path)
    "Visit the onenote link"
    (cond
     ((eq system-type 'windows-nt)
      (progn
        (w32-shell-execute
         "open" (concat "onenote:" path))))
     ((eq window-system 'ns)
      (shell-command
       (replace-regexp-in-string
        "&" "\\\\&" (format "open onenote:%s" path)))))))
#+end_src

** org publish to jekyll

#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :functions (jekyll-get-category
                jekyll-tag
                jekyll-header)
    :commands (jekyll)
    :config
    (require 'ivy)
    ;; file in jekyll base will also be uploaded to github
    (defvar path-jekyll-base "~/kimi.im/_notes/_posts")
    ;; in order to sync draft with cloud sync driver
    (defvar path-jekyll-draft (concat kimim/path-sync-emacs "kimim/_draft/"))
    ;; file in jekyll base will also be uploaded to github

    (setq org-publish-project-alist
          '(
            ("org-blog-content"
             ;; Path to your org files.
             :base-directory "~/kimi.im/_notes"
             :base-extension "org"
             ;; Path to your jekyll project.
             :publishing-directory "~/kimi.im/"
             :recursive t
             :publishing-function org-html-publish-to-html
             :headline-levels 4
             :section-numbers t
             :html-extension "html"
             :body-only t ;; Only export section between <body></body>
             :with-toc nil
             )
            ("org-blog-static"
             :base-directory "~/kimi.im/_notes/"
             :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php\\|svg"
             :publishing-directory "~/kimi.im/"
             :recursive t
             :publishing-function org-publish-attachment)
            ("blog" :components ("org-blog-content" "org-blog-static"))))

    (defun jekyll-post ()
      "Post current buffer to kimi.im"
      (interactive)
      (load-theme 'kimim-light t)
      ;; get categories
      ;; get buffer file name
      (let ((category (jekyll-get-category))
            (filepath (file-name-directory buffer-file-name))
            (filename (file-name-nondirectory buffer-file-name))
            newfilename)
        (if (not (string-match-p (expand-file-name path-jekyll-base) filepath))
            (progn
              (setq newfilename (concat
                                 path-jekyll-base "/"
                                 category "/"
                                 (format-time-string "%Y-%m-%d-") filename))
              (rename-file buffer-file-name newfilename)
              (switch-to-buffer (find-file-noselect newfilename)))
          ;; execute org-publish-current-file
          (org-publish-current-file)
          (magit-status-setup-buffer))))

    (defun jekyll-tag ()
      "add new tags"
      (interactive)
      ;; find "tags: [" and replace with "tags: [new-tag, "
      (let (tag)
        (goto-char (point-min))
        ;;  (search-forward "tags: [")
        (re-search-forward "tags: \\[" nil t)
        (setq tag (ivy-read "tags: " '(
                                       "Deutsch" "Français" "English"
                                       "emacs" "org-mode"
                                       "Windows" "macOS" "Linux"
                                       "industry" "edge-computing"
                                       "travel" "photography"
                                       "leadership"
                                       "x"
                                       )))
        (if (string= "x" tag)
            (insert "")
          (insert tag ", "))
        tag))

    (defun jekyll-header()
      "Insert jekyll post headers,
  catergories and tags are generated from exisiting posts"
      (interactive)
      (let (tag)
        (insert "#+BEGIN_EXPORT html\n---\nlayout: post\ntitle: ")
        (insert (read-string "Title: "))
        (insert "\ncategories: [")
        (insert (ivy-read "categories: " '(
                                           "technology"
                                           "productivity" "leadership"
                                           "psychology" "language"
                                           "education" "photography"
                                           )))
        (insert "]")
        (insert "\ntags: [")
        (while (progn
                 (setq tag (jekyll-tag))
                 (not (string= "x" tag))))
        (move-end-of-line 1)
        (backward-delete-char 2)
        (insert "]\n---\n#+END_EXPORT\n\n")))

    (defun jekyll ()
      (interactive)
      (find-file (concat path-jekyll-draft "/"
                         (replace-regexp-in-string
                          " " "-" (read-string "Filename: ")) ".org"))
      (jekyll-header)
      (save-buffer))

    (defun jekyll-get-category ()
      (interactive)
      (goto-char (point-min))
      (re-search-forward "^categories: \\[\\([a-z-]*\\)\\]$" nil t)
      (match-string 1))

    (defun jekyll-test ()
      (interactive)
      (org-open-file (org-html-export-to-html nil))))
#+end_src

* Note Taking Tools
** org-roam

Org-roam implements =zettelkasten= method [fn:21] used by famous German socialogist
Niklas Luhmann[fn:22].

First you should install =sqlite3=, which is used to index the links.

Windows/MSYS2:

#+begin_src shell
pacman -S mingw-w64-x86_64-sqlite3
#+end_src

Windows/Cygwin:

#+begin_src shell
apt-cyg install sqlite3
#+end_src

sqlite3 is shipped in macOS by default.

#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :defer 5
  :custom
  ((org-roam-directory kimim/path-notes)
   (org-roam-db-location (file-truename
                          (concat user-emacs-directory
                                  "org-roam.db")))
   (org-roam-buffer-window-parameters
    '((no-delete-other-windows . t)))
   (org-roam-link-auto-replace nil)
   (org-roam-file-extensions '("txt" "org"))
   (org-roam-capture-templates
    '(("d" "default" plain "%?"
       :if-new (file+head "%(concat (kimim/genfile-timestamp) \"${slug}.txt\")"
                          "#+TITLE: ${title}\n")
       :unnarrowed t))))
  :bind (("C-c n f" . org-roam-node-find)
         ("C-c n c" . org-roam-capture)
         ("C-c n r" . org-roam-node-random)
         :map org-roam-mode-map
         (("C-c n l" . org-roam)
          ("C-c n g" . org-roam-graph))
         :map org-mode-map
         (("C-c n i" . org-roam-node-insert)
          ("C-c n t" . org-roam-tag-add)
          ("C-c n a" . org-roam-alias-add)
          ("C-c n g" . org-id-get-create)
          ("C-c n b" . org-roam-buffer-toggle)))
  :config
  (require 'kimim)
  (setq org-roam-v2-ack t)
  (org-roam-db-autosync-enable)
  (advice-add 'org-roam-node-visit :after (lambda (&rest r) (reposition-window))))
#+end_src

** org-roam-bibtex

It is useful to create reference notes with ~org-roam-bibtex~. ~C-c C-z~ used in
~org-ref~ is calling ~orb-org-ref-edit-note~ to edit ~org-roam~ note.

#+begin_src emacs-lisp
(use-package org-roam-bibtex
  :hook ((org-mode bibtex-mode) . org-roam-bibtex-mode)
  :diminish org-roam-bibtex-mode
  :config
  (require 'org-ref))
#+end_src

** deft

#+begin_src emacs-lisp
(use-package deft
  :bind
  ("C-x d" . deft-find-file)
  :custom (deft-text-mode 'org-mode)
  :config
  (require 'ivy)
  (setq deft-extensions '("txt" "org" "md"))
  (setq deft-directory kimim/path-notes)
  (setq deft-recursive t)
  ;; disable auto save
  (setq deft-auto-save-interval 0)
  (setq deft-file-naming-rules '((noslash . "_")))
  (setq deft-use-filter-string-for-filename t)
  (setq deft-org-mode-title-prefix t)
  (setq deft-use-filename-as-title nil)
  (setq deft-strip-summary-regexp
        (concat "\\("
                "[\n\t]" ;; blank
                "\\|^#\\+[[:upper:]_]+:.*$" ;; org-mode metadata
                "\\|^#\\+[[:alnum:]_]+:.*$" ;; org-mode metadata
                "\\)")))
#+end_src

** zetteldeft

#+begin_src emacs-lisp
(use-package zetteldeft
  :config
  (zetteldeft-set-classic-keybindings)
  (setf zetteldeft-id-regex "[0-9]\\{8\\}\\([A-Z]\\{2,\\}\\)"))
#+end_src

* Markdown mode

Markdown is widely used as plain text file format. Pandoc [fn:23] can
be used to convert markdown file to html and other formats. We can
download the [[https://github.com/jgm/pandoc/releases/latest][latest version]] and put the binary file to system path,
such as ~/usr/local/bin~, and then set ~markdown-command~ to ~pandoc~.

#+begin_src emacs-lisp
(use-package markdown-mode
  :mode (("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :custom ((markdown-hide-markup t)
           (markdown-command "pandoc"))
  :bind(:map
        markdown-mode-map
        ("M-<up>" . markdown-move-subtree-up)
        ("M-<down>" . markdown-move-subtree-down)))
#+end_src

* Reference management

#+begin_src emacs-lisp
(use-package org-ref
  :functions (-flatten
              f-join
              reftex-get-bib-field
              org-ref-get-bibtex-key-and-file
              bibtex-completion-key-at-point
              bibtex-completion-candidates
              bibtex-completion-init
              org-ref-cite-hydra/body
              org-ref-find-bibliography
              ivy--get-window
              kimim/org-ref-open-pdf
              kimim/org-ref-open-pdf-in-dired
              kimim/org-ref-open-notes)
  :defines org-ref-default-bibliography
  :bind (("C-x m p" . kimim/org-ref-open-pdf-at-point)
         ("C-x m P" . kimim/org-ref-open-pdf-in-dired-at-point)
         ("C-x m n" . kimim/org-ref-open-notes-at-point))
  :custom
  (reftex-default-bibliography (concat kimim/path-ref "references.bib"))
  (org-ref-default-bibliography (concat kimim/path-ref "references.bib"))
  (bibtex-completion-bibliography (concat kimim/path-ref "references.bib"))
  (org-ref-pdf-directory kimim/path-ref)
  (bibtex-completion-library-path org-ref-pdf-directory)
  (org-ref-bibliography-notes (concat kimim/path-notes "org-ref-notes.txt"))
  (bibtex-completion-notes-path org-ref-bibliography-notes)
  (org-ref-get-pdf-filename-function 'kimim/org-ref-get-pdf-filename)
  :demand t
  :config
  (require 'ivy-bibtex)
  (require 'org-ref-ivy-cite)
  (setq org-ref-insert-link-function 'org-ref-insert-link
        org-ref-insert-cite-function 'kimim/org-ref-ivy-insert-cite-link
        org-ref-insert-label-function 'org-ref-ivy-insert-label-link
        org-ref-insert-ref-function 'org-ref-ivy-insert-ref-link
        org-ref-cite-onclick-function (lambda (_) (org-ref-cite-hydra/body)))

  (defun kimim/org-ref-ivy-insert-cite-link (&optional arg)
    "insert cite link with help of `ivy-bibtext' and corresponding
`ivy-bibtex-display-transformer'"
    (interactive "P")
    (setq org-ref-bibtex-files (if arg
				                   org-ref-default-bibliography
			                     (org-ref-find-bibliography)))
    (bibtex-completion-init)
    (let* ((candidates (bibtex-completion-candidates))
           (key (bibtex-completion-key-at-point))
           (preselect (and key
                           (cl-position-if (lambda (cand)
                                             (member (cons "=key=" key)
                                                     (cdr cand)))
                                           candidates))))
      (ivy-read "Open: "
                candidates
                :preselect preselect
                :caller 'ivy-bibtex
                :history 'ivy-bibtex-history
                :action 'or-ivy-bibtex-insert-cite)))

  (defun kimim/org-ref-open-bibtex-in-dired ()
    "Open dired buffer of pdf for a bibtex entry, if it exists."
    (interactive)
    (save-excursion
      (bibtex-beginning-of-entry)
      (let* ((bibtex-expand-strings t)
             (entry (bibtex-parse-entry t))
             (key (reftex-get-bib-field "=key=" entry))
             (pdf (funcall org-ref-get-pdf-filename-function key)))
        (if (file-exists-p pdf)
            (dired-jump nil (directory-file-name pdf))
          (ding)))))
  ;; open pdf with system pdf viewer
  ;;(setq bibtex-completion-pdf-open-function
  ;;      (lambda (fpath)
  ;;        (kimim/open-external fpath)))

  (defun kimim/org-ref-get-pdf-filename (key)
    "Return the pdf filename associated with a bibtex KEY.
  This searches recursively for the pattern KEY*.pdf. If one result
  is found it is returned, but if multiple results are found,
  e.g. there are related files to the KEY you are prompted for
  which one you want."
    (if org-ref-pdf-directory
        (let* ((pdf-dirs (if (listp org-ref-pdf-directory)
                             org-ref-pdf-directory
                           (list org-ref-pdf-directory)))
               (pdfs
                (-flatten
                 (--map (file-expand-wildcards
                         (f-join it (format "%s*" key)))
                        (-flatten
                         (append pdf-dirs
                                 (--map (directory-files-recursively it "" t)
                                        pdf-dirs)))))))
          (cond
           ((= 0 (length pdfs))
            (expand-file-name (format "%s.pdf" key) org-ref-pdf-directory))
           ((= 1 (length pdfs))
            (car pdfs))
           ((> (length pdfs) 1)
            (completing-read "Choose: " pdfs))))
      ;; No org-ref-pdf-directory defined so return just a file name.
      (format "%s.pdf" key)))

  (defun kimim/org-ref-open-pdf-action (entry)
    "Open the pdf for bibtex key under point if it exists."
    (with-ivy-window
      (let* ((key (cdr (assoc "=key=" entry)))
             (pdf-file (funcall org-ref-get-pdf-filename-function key)))
        (if (file-exists-p pdf-file)
            (org-open-file pdf-file)
          (message "no pdf found for %s" key)))))

  (defun kimim/org-ref-open-pdf (&optional arg)
    "Open pdf for a bibtex entry, if it exists.
assumes point is in the entry of interest in the bibfile.  but
does not check that."
    (interactive)
    (bibtex-completion-init)
    (let* ((candidates (bibtex-completion-candidates))
           (key (bibtex-completion-key-at-point))
           (preselect (and key
                           (cl-position-if (lambda (cand)
                                             (member (cons "=key=" key)
                                                     (cdr cand)))
                                           candidates))))
      (ivy-read "Open PDF of: "
                candidates
                :preselect preselect
                :caller 'ivy-bibtex
                :history 'ivy-bibtex-history
                :action 'kimim/org-ref-open-pdf-action)))

  (defun kimim/org-ref-open-pdf-at-point ()
    "Open the pdf for bibtex key under point if it exists."
    (interactive)
    (let* ((results (and (eq major-mode 'org-mode)
                         (condition-case nil
                             (org-ref-get-bibtex-key-and-file)
                           (error nil))))
           (key (car results)))
      (if (or (eq "" key) (null key))
          (kimim/org-ref-open-pdf)
        (let ((pdf-file (funcall org-ref-get-pdf-filename-function key)))
          (if (file-exists-p pdf-file)
              (org-open-file pdf-file)
            (kimim/org-ref-open-pdf))))))

  (defun kimim/org-ref-open-pdf-in-dired-action (entry)
    "Open the pdf dired for bibtex key under point if it exists."
    (with-ivy-window
      (let* ((key (cdr (assoc "=key=" entry)))
             (pdf-file (funcall org-ref-get-pdf-filename-function key)))
        (if (file-exists-p pdf-file)
            (dired-jump nil pdf-file)
          (message "no pdf found for %s" key)))))

  (defun kimim/org-ref-open-pdf-in-dired (&optional arg)
    "Open pdf dired for a bibtex entry, if it exists.
assumes point is in the entry of interest in the bibfile.  but
does not check that."
    (interactive)
    (bibtex-completion-init)
    (let* ((candidates (bibtex-completion-candidates))
           (key (bibtex-completion-key-at-point))
           (preselect (and key
                           (cl-position-if (lambda (cand)
                                             (member (cons "=key=" key)
                                                     (cdr cand)))
                                           candidates))))
      (ivy-read "Open dired of: "
                candidates
                :preselect preselect
                :caller 'ivy-bibtex
                :history 'ivy-bibtex-history
                :action 'kimim/org-ref-open-pdf-in-dired-action)))

  (defun kimim/org-ref-open-pdf-in-dired-at-point ()
    "Open the pdf dired for bibtex key under point if it exists."
    (interactive)
    (let* ((results (and (eq major-mode 'org-mode)
                         (condition-case nil
                             (org-ref-get-bibtex-key-and-file)
                           (error nil))))
           (key (car results)))
      (if (or (eq "" key) (null key))
          (kimim/org-ref-open-pdf-in-dired)
        (let ((pdf-file (funcall org-ref-get-pdf-filename-function key)))
          (if (file-exists-p pdf-file)
              (dired-jump nil pdf-file)
            (message "no pdf found for %s" key))))))

  (defun kimim/org-ref-open-notes-action (entry)
    "Open the notes for bibtex key under point if it exists."
    (with-ivy-window
      (let* ((key (cdr (assoc "=key=" entry))))
        (funcall org-ref-notes-function key))))

  (defun kimim/org-ref-open-notes (&optional arg)
    "Open pdf dired for a bibtex entry, if it exists.
assumes point is in the entry of interest in the bibfile.  but
does not check that."
    (interactive)
    (bibtex-completion-init)
    (let* ((candidates (bibtex-completion-candidates))
           (key (bibtex-completion-key-at-point))
           (preselect (and key
                           (cl-position-if (lambda (cand)
                                             (member (cons "=key=" key)
                                                     (cdr cand)))
                                           candidates))))
      (ivy-read "Open dired of: "
                candidates
                :preselect preselect
                :caller 'ivy-bibtex
                :history 'ivy-bibtex-history
                :action 'kimim/org-ref-open-notes-action)))

  (defun kimim/org-ref-open-notes-at-point ()
    "Open the notes of a reference if they exist."
    (interactive)
    (let* ((results (and (eq major-mode 'org-mode)
                         (condition-case nil
                             (org-ref-get-bibtex-key-and-file)
                           (error nil))))
           (key (car results)))
      (if (or (eq "" key) (null key))
          (kimim/org-ref-open-notes)
        (funcall org-ref-notes-function key)))))
#+end_src

There is a built-in =bibtex-mode= to manage references. We can extend it to
support more functions from =org-ref=:

#+begin_src emacs-lisp
(use-package bibtex
  :demand t
  :ensure nil
  :bind (:map bibtex-mode-map
         ("C-x m p" . org-ref-open-bibtex-pdf)
         ("C-x m d" . kimim/org-ref-open-bibtex-in-dired)
         ("C-c C-z" . org-ref-open-bibtex-notes))
  :config
  (require 'org-ref)
  (require 'org-roam-bibtex))
#+end_src

* Dictionary
** ispell

#+begin_src emacs-lisp
(use-package ispell
  :custom (ispell-program-name "aspell")
  :config
  (cond ((eq system-type 'windows-nt)
         (setq ispell-alternate-dictionary "~/.emacs.d/dict/words.txt"))))
#+end_src

** flyspell

Check spell on the fly.

#+begin_src emacs-lisp
(use-package flyspell
  :diminish flyspell-mode
  :hook ((prog-mode . flyspell-prog-mode)
         (org-mode . flyspell-mode)))
#+end_src

** Youdao dictionary

Search dictionary with Ctrl+F3 by youdao dictionary.

#+begin_src emacs-lisp
(use-package youdao-dictionary
  :bind (
         ("C-x m 1" . youdao-dictionary-search-at-point-posframe)
         ("C-x m 2" . youdao-dictionary-search)
         :map youdao-dictionary-mode-map
         ("<mouse-3>" . youdao-dictionary-def-copied)
         ("f" . youdao-dictionary-search-from-input))
  :config
  (defun youdao-dictionary-def-copied ()
    (interactive)
    (youdao-dictionary-search (gui-get-selection))))
#+end_src

* Mail and Contacts
** EBDB - a replacement for BBDB, as contact management

#+begin_src emacs-lisp
(use-package ebdb
  :commands (ebdb ebdb-mail-aliases)
  :custom (ebdb-mua-pop-up nil)
  :config
  (setq ebdb-sources (concat kimim/path-org "ebdb"))
  (require 'ebdb-gnus)
  (require 'ebdb-message)
  (require 'ebdb-org)
  (add-hook 'message-setup-hook 'ebdb-mail-aliases)
  (setq org-link-make-description-function
      (lambda (link desc)
        (let* ((link-content (split-string link ":"))
               (key (car link-content))
               (link-str (cadr link-content))
               (link-uuid (cadr (split-string link-str "/"))))
          (if desc
              desc
            (if (string= "ebdb" key)
                (ebdb-record-name-string
                 (ebdb-gethash link-uuid 'uuid))))))))
#+end_src

** erc

#+begin_src emacs-lisp
;; erc settings
(use-package erc
  :functions erc-autojoin-enable
  :commands (erc)
  :custom
  (erc-autojoin-channels-alist
   '(("irc.freenode.net" "#emacs")))
  (erc-hide-list '("JOIN" "PART" "QUIT"))
  :config
  (require 'erc-join)
  (erc-autojoin-mode 1)
  (erc-autojoin-enable)
  (setq erc-default-server "irc.freenode.net")
  (setq ))
#+end_src

** GNUS dired

#+begin_src emacs-lisp
(use-package gnus-dired
  :ensure nil
  :commands (turn-on-gnus-dired-mode)
  :config
  ;; make the `gnus-dired-mail-buffers' function also work on
  ;; message-mode derived modes, such as mu4e-compose-mode
  (defun gnus-dired-mail-buffers ()
    "Return a list of active message buffers."
    (let (buffers)
      (save-current-buffer
        (dolist (buffer (buffer-list t))
          (set-buffer buffer)
          (when (and (derived-mode-p 'message-mode)
                     (null message-sent-message-via))
            (push (buffer-name buffer) buffers))))
      (nreverse buffers)))
  (setq gnus-dired-mail-mode 'mu4e-user-agent))
#+end_src

** mu4e

#+begin_src emacs-lisp
(use-package sendmail
  :ensure nil
  :custom
  (mail-user-agent 'sendmail-user-agent)
  (mail-signature nil)
  (mail-self-blind t)
  (mail-signature-file (concat kimim/path-sync-emacs "signature.txt")))
#+end_src

#+begin_src emacs-lisp
  (use-package mu-cite
    :commands (mu-cite-original)
    :config
    (setq mu-cite-top-format '("On " date ", " from " wrote:\n\n"))
    (setq mu-cite-prefix-format '(" > ")))
#+end_src

#+begin_src emacs-lisp
(use-package mu4e
  :ensure nil
  :functions (mu4e-compose-reply
              mu4e~view-quit-buffer)
  :defines (mu4e-html2text-command
            mu4e-mu-binary
            mu4e-get-mail-command
            mu4e-update-interval
            mu4e-hide-index-messages
            mu4e-use-fancy-chars
            mu4e-view-show-images
            mu4e-view-fields
            mu4e-headers-fields
            mu4e-compose-cite-function
            mu4e-compose-reply-recipients
            mu4e-headers-mode-map
            mu4e-compose-mode-map
            mu4e-view-mode-map
            shr-color-visible-luminance-min
            shr-color-visible-distance-min)
  :custom
  (mu4e-compose-reply-recipients 'sender)
  (mu4e-compose-signature-auto-include nil)
  :commands (mu4e mu4e-compose-new)
  :bind (
         :map mu4e-headers-mode-map
         ("r" . kimim/mu4e-compose-reply-sender)
         ("R" . kimim/mu4e-compose-reply-all)
         ("f" . kimim/mu4e~view-quit-buffer)
         :map mu4e-compose-mode-map
         ("<C-tab>" . message-tab)
         :map mu4e-view-mode-map
         ("<home>" . move-beginning-of-line)
         ("<end>" . move-end-of-line)
         ("r" . kimim/mu4e-compose-reply-sender)
         ("R" . kimim/mu4e-compose-reply-all))
  :load-path (lambda ()
               (cond ((eq system-type 'darwin)
                      "/usr/local/Cellar/mu/1.0_1/share/emacs/site-lisp/mu/mu4e")
                     ((eq system-type 'cygwin)
                      "/usr/local/share/emacs/site-lisp/mu4e")
                     ((eq system-type 'gnu/linux)
                      "/usr/local/share/emacs/site-lisp/mu4e/")))
  :config
  (require 'sendmail)
  ;; turn html email to lighter color in dark theme
  (require 'mu4e-contrib)
  (setq mu4e-html2text-command 'mu4e-shr2text)
  (setq shr-color-visible-luminance-min 60)
  (setq shr-color-visible-distance-min 5)
  (setq shr-use-colors nil)
  (advice-add #'shr-colorize-region :around (defun shr-no-colourise-region (&rest ignore)))

  (require 'org-mu4e) ;; capture link
  (add-to-list 'Info-additional-directory-list "/usr/local/share/info")
  (setq mu4e-mu-binary "/usr/local/bin/mu")
  ;; (cond ((eq system-type 'gnu/linux)
  ;;        (setq mu4e-mu-binary "/snap/bin/mu")))
  (setq mail-user-agent 'mu4e-user-agent)
  ;; Fetch mail by offlineimap
  (setq mu4e-get-mail-command "offlineimap -c ~/.offlineimaprc -u quiet")
  ;; Fetch mail in 60 sec interval
  (setq mu4e-update-interval 300)
  ;; hide indexing messages from minibuffer
  (setq mu4e-hide-index-messages t)
  (setq mu4e-use-fancy-chars nil)
  (setq mu4e-view-show-images t)
  (setq mu4e-view-fields
        '(:subject :from :to :cc :date :mailing-list
                   :attachments :signature :decryption))
  (setq mu4e-headers-fields
        '( (:human-date    .   12)
           (:flags         .    6)
           (:from          .   22)
           (:subject       .   nil)))
  (setq mu4e-compose-cite-function 'mu-cite-original)
  (add-hook 'mu4e-view-mode-hook 'visual-line-mode)
  (add-hook 'mu4e-compose-mode-hook 'kimim/mail-setup)
  (add-hook 'mu4e-compose-mode-hook 'orgalist-mode)
  (add-hook 'mu4e-compose-mode-hook (lambda ()
                                      (auto-fill-mode -1)))
  (defun kimim/mu4e~view-quit-buffer ()
    (interactive)
    (when (get-buffer "*mu4e-view*")
      (switch-to-buffer "*mu4e-view*")
      (mu4e~view-quit-buffer)))

  (defun kimim/mu4e-compose-reply-sender ()
    (interactive)
    (set (make-local-variable 'mu4e-compose-reply-recipients) 'sender)
    (mu4e-compose-reply))

  (defun kimim/mu4e-compose-reply-all ()
    (interactive)
    (set (make-local-variable 'mu4e-compose-reply-recipients) 'all)
    (mu4e-compose-reply)))
#+end_src

* Viewing Documents

doc-view-mode can view many kind of documents, such as PDF, PS and images. You
should install postscript in cygwin.

#+begin_src emacs-lisp
(use-package doc-view
  :custom
  (doc-view-continuous t)
  (doc-view-image-width 500)
  (doc-view-resolution 300))
#+end_src

* Reading News

#+begin_src emacs-lisp
(use-package elfeed
  :commands (elfeed)
  :custom
  (elfeed-curl-timeout 100)
  (browse-url-browser-function 'browse-url-default-browser)
  (elfeed-feeds
   '(("http://kimi.im/atom.xml" blog)
     ("www.chinadaily.com.cn/rss/bizchina_rss.xml" CN)
     ;; from https://www.foxnews.com/story/foxnews-com-rss-feeds
     ("http://feeds.foxnews.com/foxnews/world" EN)
     ("http://feeds.foxnews.com/foxnews/scitech" EN Tech)
     ;; from https://www.lefigaro.fr/rss
     ("https://www.lefigaro.fr/rss/figaro_secteur_high-tech.xml" FR Hightech)
     ("https://www.lefigaro.fr/rss/figaro_management.xml" FR Management)
     ;; from https://www.zeit.de/hilfe/hilfe#rss
     ("http://newsfeed.zeit.de/wissen/index" DE Wissen)
     ("http://newsfeed.zeit.de/kultur/index" DE Kultur)))
  :bind (:map elfeed-search-mode-map
         ("<SPC>" . scroll-up-command)
         ("<backspace>" . scroll-down-command)
         :map elfeed-show-mode-map
         ("M-q" . article-fill-long-lines)
         ("j" . next-line)
         ("k" . previous-line))
  :config
  (require 'org)
  ;; open feed link with eww
  (require 'gnus-art)
  ;;(setq elfeed-curl-extra-arguments '("--proxy" "127.0.0.1:1080"))
  (advice-add 'elfeed-show-entry :after
              (lambda (entry)
                (setq line-spacing 0.4)
                (article-fill-long-lines))))
#+end_src

* kimim utils

In Windows environment, =kimim/xterm= and =kimim/dc= will look up the program
from system PATH, so you should set these to system PATH.

#+begin_src emacs-lisp
(use-package kimim
  :ensure nil
  :commands (kimim/mail-setup)
  :defines (mac-option-modifier
            mac-command-modifier)
  :bind
  (("C-x m m" . kimim/mail-new-empty)
   ("C-x m y" . kimim/mail-attach-files)
   ("<f9>" . kimim/xterm)
   ("S-<f9>" . kimim/cmd)
   ("C-c r" . kimim/rename-file-and-buffer)
   ("C-x m o" . kimim/open-external)
   ("C-x m O" . kimim/open-external-pdf)
   ("C-x m d" . kimim/dc)
   ("C-c d" . kimim/lookinsight)
   ("<f1>" . delete-other-windows)
   ("C-<f1>" . nuke-other-buffers)
   ("M-<f1>" . kimim/switch-to-scratch-and-nuke-others)
   ("<f2>" . other-window)
   ("<f5>" . kimim/switch-to-scratch-buffer)
   ("<f7>" . bury-buffer)
   ("<f8>" . unbury-buffer)
   ("C-h" . delete-backward-char)
   ("M-h" . backward-kill-word)
   ("M-?" . mark-paragraph)
   ("C-x k" . kill-current-buffer)
   ("C-x C-v" . view-file-other-window)
   ("C-c C-o" . occur)
   ("C-z" . set-mark-command)
   ("M-n" . next-error)
   ("M-p" . previous-error)
   ("C-c C-/" . comment-or-uncomment-region)
   ("RET" . newline-and-indent)
   ("C-x m h" . help)
   ("C-x m ." . unbury-buffer)
   ("C-x m ," . bury-buffer)
   ("C-x m  。" . unbury-buffer)
   ("C-x m  ，" . bury-buffer)
   ("C-x ," . bury-buffer)
   ("C-x ." . unbury-buffer)
   ("C-x  ，" . bury-buffer)
   ("C-x  。" . unbury-buffer)
   ("C-x  ‘" . hippie-expand)
   ("C-x  ’" . hippie-expand)
   ("C-x M-s" . eshell)
   ("C-+" . text-scale-increase)
   ("C--" . text-scale-decrease)
   ("C-=" . text-scale-adjust)
   ("C-0" . kimim/restore-text-scale)
   ("C-x /" . kimim/toggle-path-header)
   ("C-x m 0" . kimim/frame-and-font)
   ("C-x m SPC" . kimim/shrink-down)
   ("C-x m ]" . kimim/shrink-right)
   ("C-x m [" . kimim/shrink-left)
   ("M-]" . kimim/shrink-right)
   ("M-[" . kimim/shrink-left)
   ("C-x m ^" . kimim/shrink-up)
   ("C-x m '" . kimim/top-right-mouse)
   ("C-x m r" . kimim/rename-file-and-buffer))
  :load-path "~/kimim-emacs/site-lisp"
  :config
  (unbind-key "C-x C-z")
  (when (eq system-type 'darwin) ;; mac specific settings
    (setq mac-option-modifier 'meta)
    (setq mac-command-modifier 'meta)
    ;; sets fn-delete to be right-delete
    (global-set-key [kp-delete] 'delete-char))
  (defun kimim/switch-to-scratch-and-nuke-others ()
    (interactive)
    (switch-to-buffer "*scratch*") (nuke-other-buffers))
  (defun kimim/switch-to-scratch-buffer ()
    (interactive)
    (switch-to-buffer "*scratch*")
    (delete-other-windows))
  (defun kimim/restore-text-scale ()
    (interactive)
    (text-scale-increase 0)))
#+end_src

* Keybindings

Finally, let's list the useful key bindings in a table.

#+ATTR_LATEX: :environment longtable :align l|lp{3cm}r|l|l
| Mode     | Keys    | Commands                     | Description               |
|----------+---------+------------------------------+---------------------------|
| Global   | C-x m 0 | kimim/top-right-mouse        | Move mouse to top right   |
|          | C-x m c | ace-jump-mode                |                           |
|          | C-x o   | ace-window                   |                           |
|          | M-o     | ace-window                   |                           |
|          | C-x m w | ace-swap-window              |                           |
|          | C-x m x | ace-delete-window            |                           |
|          | C-s     | swiper                       | search with swiper        |
|          | C-s C-s | resume swiper search         |                           |
|          | C-x 5 2 | make-frame                   | make a new frame          |
|          | C-x 5 0 | delete-frame                 | delete current frame      |
|          | C-x 5 1 | delete-other-frames          | only keep current frame   |
|          | C-x 5 b | switch-to-buffer-other-frame |                           |
|          | C-x 5 f | find-file-other-frame        |                           |
|          | C-x 5 d | dired-other-frame            |                           |
|          | C-x 5 o | other-frame                  |                           |
| File     | C-x m r | kimim/rename-file-and-buffer | rename buffer file        |
| chars    | C-q M-a |                              | á                         |
|          | C-q M-b |                              | â                         |
|          | C-q M-c |                              | ã                         |
|          | C-q M-d |                              | ä                         |
|          | C-q M-e |                              | å                         |
|          | C-q M-f |                              | æ                         |
|          | C-q M-g |                              | ç                         |
|          | C-q M-h |                              | è                         |
|          | C-q M-i |                              | é                         |
|          | C-q M-j |                              | ê                         |
|          | C-q M-k |                              | ë                         |
|          | C-q M-l |                              | ì                         |
|          | C-q M-m |                              | í                         |
|          | C-q M-n |                              | î                         |
|          | C-q M-o |                              | ï                         |
|          | C-q M-p |                              | ð                         |
|          | C-q M-q |                              | ñ                         |
|          | C-q M-r |                              | ò                         |
|          | C-q M-s |                              | ó                         |
|          | C-q M-t |                              | ô                         |
|          | C-q M-u |                              | õ                         |
|          | C-q M-v |                              | ö                         |
|          | C-q M-w |                              | ÷                         |
|          | C-q M-x |                              | ø                         |
|          | C-q M-y |                              | ù                         |
|          | C-q M-z |                              | ú                         |
|          | C-q M-0 |                              | °                         |
|          | C-q M-1 |                              | ±                         |
|          | C-q M-2 |                              | ²                         |
|          | C-q M-3 |                              | ³                         |
|          | C-q M-4 |                              | ´                         |
|          | C-q M-5 |                              | µ                         |
|          | C-q M-6 |                              | ¶                         |
|          | C-q M-7 |                              | ·                         |
|          | C-q M-8 |                              | ¸                         |
|          | C-q M-9 |                              | ¹                         |
|          | C-q M-` |                              | à                         |
|          | C-q M-- |                              | ­                         |
|          | C-q M-+ |                              | ½                         |
| flyspell | C-,     | flyspell-goto-next-error     |                           |
|          | C-.     | flyspell-auto-correct-word   |                           |
| dired    | R       | dired-do-rename              |                           |
|          | C       | dired-do-copy                |                           |
|          | o       | kimim/open-external          | Open file in external app |
|          | b       | dired-up-directory           |                           |
|          | e       | dired-efap                   | Edit file name            |
|          | C-q     | kimim/kill-dired-buffers     |                           |
|          | q       | quit-window                  |                           |

* Footnotes

[fn:1] http://www.literateprogramming.com/

[fn:2] https://orgmode.org/

[fn:3] https://www.msys2.org/

[fn:4] http://cygwin.com/

[fn:5] https://github.com/transcode-open/apt-cyg

[fn:6] http://kimi.im/2021-01-28-emacs-inside-manjaro-wsl2-windows

[fn:7] http://brew.sh/

[fn:8] https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html

[fn:9] https://github.com/tldr-pages/tldr

[fn:10] https://github.com/kuanyui/tldr.el

[fn:11] https://emacs.stackexchange.com/questions/22283/dired-group-directories-and-symlinks-to-directories-first

[fn:12] https://github.com/ggreer/the_silver_searcher#installation

[fn:13] https://github.com/Wilfred/ag.el

[fn:14] https://github.com/syl20bnr/spacemacs/issues/381

[fn:15] https://github.com/Fuco1/smartparens

[fn:16] https://github.com/emacs-lsp/lsp-mode/issues/2622

[fn:17] https://clojure.org/

[fn:18] https://cider.mx/

[fn:19] https://github.com/jorgenschaefer/elpy

[fn:20] https://github.com/ralesi/ahk-mode

[fn:21] https://zettelkasten.de/

[fn:22] https://en.wikipedia.org/wiki/Niklas_Luhmann

[fn:23] https://pandoc.org/

[fn:24] https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Components.html
