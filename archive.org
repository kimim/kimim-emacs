** poly-org

Polymode [fn:21] is a framework for multiple major modes (MMM) inside a single
Emacs buffer. It is comfortable to enable it during literating program.

#+begin_src emacs-lisp
;;(use-package poly-org
;;  :ensure t)
#+end_src

** deft

#+begin_src emacs-lisp
(use-package deft
  :bind
  ("C-x d" . deft-find-file)
  :custom (deft-text-mode 'org-mode)
  :functions (kimim/deft-open-file-advice
              kimim/deft-new-file-named-advice
              kimim/genfile-timestamp)
  :config
  (use-package ivy)
  (setq deft-extensions '("txt" "org" "md"))
  (setq deft-directory kimim/path-notes)
  (setq deft-recursive t)
  ;; disable auto save
  (setq deft-auto-save-interval 0)
  (setq deft-file-naming-rules '((noslash . "_")))
  (setq deft-use-filter-string-for-filename t)
  (setq deft-org-mode-title-prefix t)
  (setq deft-use-filename-as-title nil)
  (setq deft-strip-summary-regexp
        (concat "\\("
                "[\n\t]" ;; blank
                "\\|^#\\+[[:upper:]_]+:.*$" ;; org-mode metadata
                "\\|^#\\+[[:alnum:]_]+:.*$" ;; org-mode metadata
                "\\)"))

  ;;advise deft-open-file to replace spaces in file names with _
  (require 'kimim)
  (defun kimim/deft-open-file-advice (orig-fun &rest args)
    (let (name title)
      (setq name (pop args))
      (if (file-exists-p name)
          (progn
            (push name args)
            (apply orig-fun args))
        (progn
          (setq title (file-name-sans-extension
                       (file-name-nondirectory name)))
          (setq name (concat
                      (file-name-directory name)
                      (kimim/genfile-timestamp)
                      (downcase
                       (replace-regexp-in-string
                        " " "_" (file-name-nondirectory name)))
                      (if (not (file-name-extension name))
                          ".txt")))
          (push name args)
          (apply orig-fun args)
          (insert (concat "#+TITLE: " title "\n\n"))))))

  (advice-add 'deft-open-file
              :around #'kimim/deft-open-file-advice)

  (defun kimim/deft-new-file-named-advice (orig-fun &rest args)
    (let (name title)
      (setq name (pop args))
      (setq title name)
      (setq name (concat
                  (kimim/genfile-timestamp)
                  (downcase
                   (replace-regexp-in-string
                    " " "_" name))))
      (push name args)
      (apply orig-fun args)
      (insert (concat "#+TITLE: " title "\n\n"))))

  (advice-add 'deft-new-file-named
              :around #'kimim/deft-new-file-named-advice))
#+end_src

** org link: match

New link to use everything to locate a file with unique ID:

#+begin_src emacs-lisp
  (use-package org
    :functions org-match-open
    :config
    (org-link-set-parameters "match"
                             :follow #'org-match-open)

    (defun org-match-open (path)
      "Visit the match search on PATH.
       PATH should be a topic that can be thrown at everything/?."
      (w32-shell-execute
       "open" "Everything" (concat "-search " path))))
#+end_src
** Install fonts

Because Incosolata font is really great for programming, and Microsoft Yahei is
nice font to view Chinese characters, you'd better download and install these
fonts from:

- https://fonts.google.com/specimen/Inconsolata
- https://github.com/loseblue/yaheiInconsolata.ttf

For Windows and macOS, you can view and install fonts with font viewer.

For Linux, you could just move all above font files to
=/usr/local/share/fonts/=.
** Everything

Everything[fn:14] is a wonderful fast file and folder search engine, it provide
a command line tool to get search result from Everything to command line output:
=es.exe= [fn:15].

Reminded that Everything should be running in background to do the real search
task for =es.exe=.

#+BEGIN_SRC emacs-lisp
  (use-package everything
    :defer t
    :ensure t
    :init
    (setq everything-cmd (concat kimim/path-kimikit "bin/es.exe")))
#+END_SRC

** helm

#+begin_src emacs-lisp
  (use-package helm)
#+end_src
** Simplenote2

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :defer t
    :ensure t
    )

  (use-package simplenote2
    :defer t
    :ensure t
    :bind
    (
     ("C-x p" . simplenote2-list)
     ;; when in Chinese environment, / is a dot, confusing
     ("C-;" . simplenote2-list-filter-notes)
     ("C-." . simplenote2--create-note-locally))
    :config
    (require 'simplenote2)
    (require 'markdown-mode)
    ;;(require 'visual-fill-column)
    (setq simplenote2-notes-mode 'markdown-mode)
    ;;(add-hook 'simplenote2-note-mode-hook 'visual-fill-column-mode)
    (simplenote2-setup)
    )
#+END_SRC

New orgmode link type for simplenote2. The reason for creating a new kind of
link type is that the newly added note is located under folder "new", while the
synchronized notes are in "notes". We should ensure that all the link points to
note in "notes" folder.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package org
    :defer t
    :config
    (org-add-link-type "simplenote2" 'org-simplenote2-open)

    (defun org-simplenote2-open (path)
      (find-file (concat simplenote2-directory "notes/" path)))

    (defun simplenotes-linkto-note ()
      "extract orgmode link string to this note"
      (interactive)
      (unless (buffer-file-name)
        (error "No file for buffer %s" (buffer-name)))
      (beginning-of-buffer)
      (let (title msg)
        ;;fetch first line string as title
        (setq title (buffer-substring-no-properties
                     (line-beginning-position) (line-end-position)))
        ;;package orgmode line with buffer name and title
        (setq msg (format "[[simplenote2:%s][%s]]"
                          (file-name-nondirectory (buffer-file-name))
                          title))
        (kill-new msg)
        (message msg))))
#+END_SRC


** BBDB for contact management

#+BEGIN_SRC emacs-lisp
  (use-package bbdb
    :defer t
    :bind
    :config
    (setq bbdb-file (concat kimim/path-sync "kimikit/emacs.d/bbdb"))
    ;; https://www.emacswiki.org/emacs/BbdbMailingLists
    ;;(add-hook 'message-setup-hook 'bbdb-mail-aliases)
    )
#+END_SRC
** GNUS setting

#+begin_src emacs-lisp
  ;; gnus settings
  (use-package gnus
    :ensure nil
    :defer t
    :bind
    (("C-x m m" . kimim/mail-new-empty)
     ("C-x m n" . kimim/mail-new)
     ("C-x m y" . kimim/mail-attach-files)
     :map gnus-summary-mode-map
     ("g" . gnus-summary-insert-new-articles)
     ("f" . gnus-summary-forward-with-original)
     ("R" . gnus-summary-very-wide-reply-with-original)
     ("<delete>" . gnus-summary-delete-article)
     ("<insert>" . mail-archive-kimim))
    :config
    (message "......gnus[0]")
    (use-package ebdb)
    (use-package gnus-dired :ensure nil)
    (setq gnus-visible-headers
          "^Subject:\\|^From:\\|^To:\\|^[BGF]?CC:\\|^Date:")
    (setq gnus-sorted-header-list
          '("^Subject:" "^From:""^To:" "^[BGF]?CC:" "^Date:"))
    (setq compose-mail-user-agent-warnings nil) ;; remove warning
    (setq message-directory "~/Gnus/Mail/")
    (setq gnus-directory "~/Gnus/News/")
    (setq nnfolder-directory "~/Gnus/Mail/Archive")
    ;; unfortunately, following variable not support CN strings
    (setq gnus-permanently-visible-groups "\\(Inbox\\|INBOX\\|已发送邮件\\)")
    (setq mail-self-blind t)
    (setq gnus-alias-override-user-mail-address t)
    (setq mail-signature-file (concat kimim/path-sync "kimikit/emacs.d/signature.txt"))
    (setq gnus-asynchronous t)
    (setq gnus-use-article-prefetch 1000)
    (setq gnus-fetch-old-headers 'some)
    ;; fetch only 50 latest articles to speed up downloading
    (setq gnus-large-newsgroup 50)
    (setq message-forward-as-mime t)
    (setq message-forward-before-signature t) ;; put signature before the fwd msg
    (setq message-forward-included-headers "^Date\\|^From\\|^To\\|^Subject:")
    (setq message-make-forward-subject-function 'message-forward-subject-fwd)
    (setq gnus-user-date-format-alist
          '(((gnus-seconds-today) . "Today %H:%M")
            ((+ 86400 (gnus-seconds-today)) . "Yest. %H:%M")
            (604800 . "%a %H:%M")               ; That's one week
            ((gnus-seconds-month) . "%a %H:%M")
            ((gnus-seconds-year) . "%b %d")
            (t . "%b %d %Y")))
    (setq gnus-summary-line-format
          ":%U%R | %d%13&user-date; %-13,13f (%5k) | %B %s %-120= \n")
    (setq gnus-article-sort-functions '((not gnus-article-sort-by-date)))
    (setq gnus-thread-sort-functions '((not gnus-thread-sort-by-date)))
    (setq gnus-thread-ignore-subject t)
    (setq gnus-agent t)
    (setq gnus-agent-expire-days 90)
    ; prompt for how many articles only for larger than 1000 articles
    (setq gnus-large-newsgroup 100)
    (setq gnus-use-cache t)
    (setq gnus-fetch-old-headers 1) ; show previous messages in a thread
    (setq gnus-thread-indent-level 1)
    (setq gnus-show-threads t)
    (setq gnus-thread-hide-subtree nil)
    (add-hook 'gnus-summary-prepare-hook 'gnus-summary-hide-all-threads)
    ;;(use-package orgalist)
    ;;(add-hook 'message-mode-hook 'orgalist-mode)
    (add-hook 'message-mode-hook 'turn-off-auto-fill)
    (defun gnus-summary-forward-with-original (n &optional wide)
      "Start composing a reply mail to the current message.
  The original article will be yanked."
      (interactive "P")
      (gnus-summary-reply (gnus-summary-work-articles n) wide)
      (mail-to)
      (message-beginning-of-line)
      (kill-line)
      (mail-subject)
      (message-beginning-of-line)
      (delete-char 2)
      (narrow-to-region (line-beginning-position) (line-end-position))
      (goto-char (point-min))
      (while (search-forward "Fw: " nil t)
        (replace-match ""))
      (while (search-forward "转发： " nil t)
        (replace-match ""))
      (widen)
      (message-beginning-of-line)
      (insert "FW")
      (mail-to))

    (define-key gnus-summary-mode-map
      [remap gnus-summary-followup-with-original]
      'gnus-summary-forward-with-original)

    (define-key gnus-summary-mode-map
      [remap gnus-summary-reply]
      'gnus-summary-reply-with-original)

    (define-key gnus-summary-mode-map
      [remap gnus-summary-wide-reply]
      'gnus-summary-very-wide-reply-with-original)

    (add-hook 'gnus-message-setup-hook 'kimim/mail-setup))
#+end_src
** C

#+begin_src emacs-lisp
  ;; Define the modes/packages you need
  (use-package company-irony)
  (use-package company-c-headers)

  (use-package irony
    :diminish irony-mode
    :config
    (setq w32-pipe-read-delay 0)
    (use-package company-irony)
    (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
    (require 'flycheck)
    (add-hook 'c-mode-hook 'flycheck-mode)
    (add-hook 'c++-mode-hook 'flycheck-mode)
    (use-package company)
    (use-package company-c-headers)
    (add-to-list 'company-c-headers-path-system "/usr/include")

    ;; replace the `completion-at-point' and `complete-symbol' bindings in
    ;; irony-mode's buffers by irony-mode's function
    (defun my-irony-mode-hook ()
      (define-key irony-mode-map [remap completion-at-point]
        'irony-completion-at-point-async)
      (define-key irony-mode-map [remap complete-symbol]
        'irony-completion-at-point-async))
    (add-hook 'irony-mode-hook 'my-irony-mode-hook))

  (use-package company-c-headers)

  (use-package flycheck
    :config
    ;; set up flycheck
    (add-hook 'flycheck-mode-hook #'flycheck-irony-setup))

  (use-package cc-mode
    :ensure nil
    :config
    (add-to-list 'auto-mode-alist '("\\.C\\w*\\'" . c-mode))
    (use-package company)
    (use-package company-irony)
    (add-to-list 'company-backends 'company-irony)
    (use-package company-c-headers)
    (add-to-list 'company-c-headers-path-system "/usr/include")
    (require 'irony)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode)
    (require 'flycheck)
    (add-hook 'c-mode-hook 'flycheck-mode)
    (add-hook 'c++-mode-hook 'flycheck-mode)
    (require 'ggtags)
    (add-hook 'c-mode-hook 'ggtags-mode)
    (add-hook 'c++-mode-hook 'ggtags-mode)

    (add-hook 'c-mode-common-hook
              (lambda ()
                ;; show column width indicator
                ;;(fci-mode 0)
                ;;(syntax-subword-mode 1)
                ;;(hs-minor-mode 0)
                ;;(c-set-style "gnu")
                (c-toggle-auto-newline 0)
                (c-toggle-auto-hungry-state 0)
                (c-toggle-syntactic-indentation 1)
                ;;(highlight-indentation-mode 1)
                (which-function-mode 1)
                (local-set-key "\C-co" 'ff-find-other-file)
                ;;(my-c-mode-common-hook-if0)
                (setq c-basic-offset 4))))
#+end_src

*** irony installation

=irony-mode= is developed by Sarcasm [fn:13]. It is an Emacs minor-mode that
aims at improving the editing experience for the C, C++ and Objective-C
languages. It works by using a combination of an Emacs package and a C++ program
(=irony-server=) that uses libclang. When correctly configured, it can provide
wonderful auto completion for functions and variables. The function prototypes
with parameters can be triggered as a yasnippet automatically.

It is quite easy to install =irony-server= under macOS, just invoke the command
"M-x irony-install-server", and Emacs will compile and install it to
=~/.emacs.d/irony/bin/irony-server=, by invoking the make commands:

#+begin_src shell
  cmake -DCMAKE_INSTALL_PREFIX\=/Users/kimim/.emacs.d/irony/
  /Users/kimim/.emacs.d/elpa/irony-20160925.1030/server && cmake --build
  . --use-stderr --config Release --target install
#+end_src

For Cygwin/Windows, first we should install =libclang= 3.8.1-1 and
=libclang-devel= 3.8.1-1 and =cmake= with =setup.exe=.

Then compile =irony-server= with =cmake= and =make=:

#+begin_src shell
~/.emacs.d/elpa/irony-20160925.1030/server/build
$ cmake -DCMAKE_INSTALL_PREFIX=~/.emacs.d/irony/ -G "Unix Makefiles" ..

~/.emacs.d/elpa/irony-20160925.1030/server/build
$ make install
Scanning dependencies of target irony-server
[ 14%] Building CXX object src/CMakeFiles/irony-server.dir/support/CommandLineParser.cpp.o
[ 28%] Building CXX object src/CMakeFiles/irony-server.dir/support/TemporaryFile.cpp.o
[ 42%] Building CXX object src/CMakeFiles/irony-server.dir/Command.cpp.o
[ 57%] Building CXX object src/CMakeFiles/irony-server.dir/Irony.cpp.o
[ 71%] Building CXX object src/CMakeFiles/irony-server.dir/TUManager.cpp.o
[ 85%] Building CXX object src/CMakeFiles/irony-server.dir/main.cpp.o
[100%] Linking CXX executable ../bin/irony-server.exe
[100%] Built target irony-server
Install the project...
-- Install configuration: "Release"
-- Up-to-date: /home/kimim/.emacs.d/irony/bin/irony-server.exe
#+end_src
** cloljure
#+begin_src clojure

(defun org-babel-execute:clojure (body params)
      "Execute a block of Clojure code with Babel.
  The underlying process performed by the code block can be output
  using the :show-process parameter."
      (let* ((expanded (org-babel-expand-body:clojure body params))
             (response (list 'dict))
             result)
        (cl-case org-babel-clojure-backend
          (cider
           (require 'cider)
           (let ((result-params (cdr (assq :result-params params)))
                 (show (cdr (assq :show-process params))))
             (if (member show '(nil "no"))
                 ;; Run code without showing the process.
                 (progn
                   (setq response
                         (let ((nrepl-sync-request-timeout
                                org-babel-clojure-sync-nrepl-timeout))
                           (nrepl-sync-request:eval expanded
                                                    (cider-current-connection))))
                   (setq result
                         (concat
                          (nrepl-dict-get response
                                          (if (or (member "output" result-params)
                                                  (member "pp" result-params))
                                              "out"
                                            "value"))
                          (nrepl-dict-get response "ex")
                          (nrepl-dict-get response "root-ex")
                          (nrepl-dict-get response "err"))))
               ;; Show the process in an output buffer/window.
               (let ((process-buffer (switch-to-buffer-other-window
                                      "*Clojure Show Process Sub Buffer*"))
                     status)
                 ;; Run the Clojure code in nREPL.
                 (nrepl-request:eval
                  expanded
                  (lambda (resp)
                    (when (member "out" resp)
                      ;; Print the output of the nREPL in the output buffer.
                      (princ (nrepl-dict-get resp "out") process-buffer))
                    (when (member "ex" resp)
                      ;; In case there is an exception, then add it to the
                      ;; output buffer as well.
                      (princ (nrepl-dict-get resp "ex") process-buffer)
                      (princ (nrepl-dict-get resp "root-ex") process-buffer))
                    (when (member "err" resp)
                      ;; In case there is an error, then add it to the
                      ;; output buffer as well.
                      (princ (nrepl-dict-get resp "err") process-buffer))
                    (nrepl--merge response resp)
                    ;; Update the status of the nREPL output session.
                    (setq status (nrepl-dict-get response "status")))
                  (cider-current-connection))

                 ;; Wait until the nREPL code finished to be processed.
                 (while (not (member "done" status))
                   (nrepl-dict-put response "status" (remove "need-input" status))
                   (accept-process-output nil 0.01)
                   (redisplay))

                 ;; Delete the show buffer & window when the processing is
                 ;; finalized.
                 (mapc #'delete-window
                       (get-buffer-window-list process-buffer nil t))
                 (kill-buffer process-buffer)

                 ;; Put the output or the value in the result section of
                 ;; the code block.
                 (setq result
                       (concat
                        (nrepl-dict-get response
                                        (if (or (member "output" result-params)
                                                (member "pp" result-params))
                                            "out"
                                          "value"))
                        (nrepl-dict-get response "ex")
                        (nrepl-dict-get response "root-ex")
                        (nrepl-dict-get response "err")))))))
          (slime
           (require 'slime)
           (with-temp-buffer
             (insert expanded)
             (setq result
                   (slime-eval
                    `(swank:eval-and-grab-output
                      ,(buffer-substring-no-properties (point-min) (point-max)))
                    (cdr (assq :package params))))))
          (lein-exec
           (let ((result-params (cdr (assq :result-params params))))
             (if (or (member "output" result-params)
                     (member "pp" result-params))
                 (write-region (concat "(use 'clojure.pprint)
  " expanded) nil "tmp.clj")
               (write-region (concat "(use 'clojure.pprint)
  (clojure.pprint/pprint
    (do " expanded "))") nil "tmp.clj"))
             (setq result
                   (replace-regexp-in-string
                    "" ""
                    (shell-command-to-string (concat "cat tmp.clj | lein exec")))))))
        (org-babel-result-cond (cdr (assq :result-params params))
          result
          (condition-case nil (org-babel-script-escape result)
            (error result)))))
#+end_src
** pangu-spacing

#+begin_src emacs-lisp
  (use-package pangu-spacing
    :diminish pangu-spacing-mode
    :config
    (global-pangu-spacing-mode 1)
    (add-hook 'org-mode-hook
              '(lambda ()
                 (set
                  (make-local-variable
                   'pangu-spacing-real-insert-separtor) t))))
#+end_src

** dired-collapse

It will be difficult to mark the parent directory. Thus let's disable this
extention now.

#+begin_src emacs-lisp
(use-package dired-collapse)
#+end_src
** selectrum

#+begin_src emacs-lisp
(use-package selectrum-prescient
  :config
  (selectrum-prescient-mode +1)
  (prescient-persist-mode +1))
#+end_src

#+begin_src emacs-lisp
(use-package marginalia
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init configuration is always executed (Not lazy!)
  :init
  (marginalia-mode)

  ;; When using Selectrum, ensure that Selectrum is refreshed when cycling annotations.
  (advice-add #'marginalia-cycle :after
              (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit)))))
#+end_src

#+begin_src emacs-lisp
(use-package selectrum
  :defer 1
  :config
  (selectrum-mode +1)
  (use-package selectrum-prescient)
  (selectrum-prescient-mode +1)
  (prescient-persist-mode +1)
  (use-package marginalia)
  (marginalia-mode +1))
#+end_src

** package

original elpa's:
#+begin_src emacs-lisp
;; upstream
(setq package-archives
      '(("gnu" . "https://elpa.gnu.org/packages/")
        ("melpa" . "https://melpa.org/packages/")
        ("org" . "https://orgmode.org/elpa/")))
;; tsinghua mirror
(setq package-archives
      '(("gnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
        ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
        ("org" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/org/")))
#+end_src

** Tagging

#+begin_src emacs-lisp
(use-package ggtags
  :bind (("C-c f" . ggtags-find-file))
         ;;("M-." . ggtags-find-tag-dwim)
         ;;("M-*" . pop-tag-mark))
  :config
  ;; (use-package ggtags)
  ;; (add-hook 'c-mode-hook 'ggtags-mode)
  ;; (add-hook 'c++-mode-hook 'ggtags-mode)

  (setq ggtags-global-ignore-case t)
  (setq ggtags-sort-by-nearness t))
#+end_src

** ox-html

do not embed svg in file now.

#+begin_src emacs-lisp
(defun org-babel-result-to-file (result &optional description)
  "Convert RESULT into an `org-mode' link with optional DESCRIPTION.
  If the `default-directory' is different from the containing
  file's directory then expand relative links."
  (when (stringp result)
    (if (string= "svg" (file-name-extension result))
        (progn
          (with-temp-buffer
            (if (file-exists-p (concat result ".html"))
                (delete-file (concat result ".html")))
            (rename-file result (concat result ".html"))
            (insert-file-contents (concat result ".html"))
            (message (concat result ".html"))
            (format "#+BEGIN_HTML
  <div style=\"text-align: center;\">
  %s
  </div>
  ,#+END_HTML"
                    (buffer-string)
                    )))
      (progn
        (format "[[file:%s]%s]"
                (if (and default-directory
                         buffer-file-name
                         (not (string= (expand-file-name default-directory)
                                       (expand-file-name
                                        (file-name-directory buffer-file-name)))))
                    (expand-file-name result default-directory)
                  result)
                (if description (concat "[" description "]") ""))))))
#+end_src

** Dealing with Unicode fonts

#+begin_src emacs-lisp
(use-package unicode-fonts
  :defer 3
  :config
  (defun unicode-fonts-setup-advice ()
    (if window-system
        (set-fontset-font
         "fontset-default"
         'cjk-misc (font-spec :family "YaheiInconsolata"))))
  (advice-add 'unicode-fonts-setup :after 'unicode-fonts-setup-advice)
  (defun kimim/add-font (group font)
    (let ((font-list (assoc group unicode-fonts-block-font-mapping)))
      (setf (cadr font-list) (cons font (cadr font-list)))))
  (seq-map (lambda (group) (kimim/add-font group "YaheiInconsolata"))
           '("Bopomofo" "Bopomofo Extended" "CJK Compatibility" "CJK Compatibility Forms"
             "CJK Compatibility Ideographs" "CJK Compatibility Ideographs Supplement"
             "CJK Radicals Supplement" "CJK Strokes" "CJK Symbols and Punctuation"
             "CJK Unified Ideographs" "CJK Unified Ideographs Extension A"
             "CJK Unified Ideographs Extension B" "CJK Unified Ideographs Extension C"
             "CJK Unified Ideographs Extension D" "CJK Unified Ideographs Extension E"
             "Enclosed Ideographic Supplement" "Halfwidth and Fullwidth Forms"
             "Hangul Compatibility Jamo" "Hangul Jamo" "Hangul Jamo Extended-A"
             "Hangul Jamo Extended-B" "Hangul Syllables" "Ideographic Description Characters"
             "IPA Extensions" "Mathematical Alphanumeric Symbols"))
  (seq-map (lambda (group) (kimim/add-font group "Consolas"))
           '("Combining Diacritical Marks" "Combining Half Marks" "Cyrillic"
             "Cyrillic Supplement" "Greek Extended" "Greek and Coptic" "Phonetic Extensions"
             "Phonetic Extensions Supplement" "Superscripts and Subscripts"))
  (add-to-list 'unicode-fonts-block-font-mapping
               '("Spacing Modifier Letters"
                 ("Consolas" "Monaco" "YaheiInconsolata")))
  (unicode-fonts-setup))
#+end_src

** org link: deft

=C-x l= keychord can store deft links in deft mode, but cannot fetch the link
from deft note. Below defines a function to fetch a deft style link, which can
be used to paste directly in other org files, such as work journal. Buffer file
name handling function can be found from emacs manual[fn:22].

#+begin_src emacs-lisp
  (use-package org
    :bind
    (("C-x m d" . kimim/deft-store-link))
    :config
    (defun kimim/deft-store-link()
      "get deft link of current note file."
      (interactive)
      (unless (buffer-file-name)
        (error "No file for buffer %s" (buffer-name)))
      (let ((msg (format "[[deft:%s]]"
                         (file-name-nondirectory (buffer-name)))))
        (kill-new msg)
        (message msg))))
#+end_src

** company dict

complete with keyword and annotation. need special dict files for different mode.

#+begin_src emacs-lisp
(use-package company-dict
  :config
  ;; Where to look for dictionary files
  (setq company-dict-dir (concat kimim/path-sync-emacs "dict")))
#+end_src
